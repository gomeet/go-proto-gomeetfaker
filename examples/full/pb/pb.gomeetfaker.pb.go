// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: examples/full/pb/pb.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	examples/full/pb/pb.proto

It has these top-level messages:
	EnumMessage
	ComplexMessage
	WithoutFakerMessage
	SkipFakerMessage
	ScalarRepeatedRulesOnlyMessage
	ValueMessage
	UuidMessage
	AddressMessage
	AppMessage
	AvatarMessage
	BitcoinMessage
	BusinessMessage
	CodeMessage
	CommerceMessage
	CompanyMessage
	DateMessage
	FinanceMessage
	HackerMessage
	InternetMessage
	LoremMessage
	NameMessage
	NumberMessage
	PhoneNumberMessage
	TeamMessage
	TimeMessage
	EmbedAllFakerMessage
	EmbedOneOfFakerMessage
	EmbedAllFakerRepeatedMessage
	EmbedAllFakerRepeatedNoRulesMessage
	ContainsNestedMessage
*/
package pb

import faker "github.com/dmgk/faker"
import locales "github.com/dmgk/faker/locales"
import rand "math/rand"
import strings "strings"
import strconv "strconv"
import time "time"
import ptypes "github.com/golang/protobuf/ptypes"
import uuid "github.com/google/uuid"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gomeet/go-proto-gomeetfaker"
import _ "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func GomeetFakerRand() *rand.Rand {
	seed := time.Now().UnixNano()
	return rand.New(rand.NewSource(seed))
}
func init() {
	GomeetFakerSetLocale("en")
}

func GomeetFakerSetLocale(l string) {
	switch l {
	case "de":
		faker.Locale = locales.De
	case "de-at":
		faker.Locale = locales.De_AT
	case "de-ch":
		faker.Locale = locales.De_CH
	case "en":
		faker.Locale = locales.En
	case "en-au":
		faker.Locale = locales.En_AU
	case "en-au-ocker":
		faker.Locale = locales.En_AU_OCKER
	case "en-bork":
		faker.Locale = locales.En_BORK
	case "en-ca":
		faker.Locale = locales.En_CA
	case "en-gb":
		faker.Locale = locales.En_GB
	case "en-ind":
		faker.Locale = locales.En_IND
	case "en-nep":
		faker.Locale = locales.En_NEP
	case "en-us":
		faker.Locale = locales.En_US
	case "es":
		faker.Locale = locales.Es
	case "fa":
		faker.Locale = locales.Fa
	case "fr":
		faker.Locale = locales.Fr
	case "it":
		faker.Locale = locales.It
	case "ja":
		faker.Locale = locales.Ja
	case "ko":
		faker.Locale = locales.Ko
	case "nb-no":
		faker.Locale = locales.Nb_NO
	case "nl":
		faker.Locale = locales.Nl
	case "pl":
		faker.Locale = locales.Pl
	case "pt-br":
		faker.Locale = locales.Pt_BR
	case "ru":
		faker.Locale = locales.Ru
	case "sk":
		faker.Locale = locales.Sk
	case "sv":
		faker.Locale = locales.Sv
	case "vi":
		faker.Locale = locales.Vi
	case "zh-cn":
		faker.Locale = locales.Zh_CN
	case "zh-tw":
		faker.Locale = locales.Zh_TW
	default:
		faker.Locale = locales.En
	}
}
func NewEnumMessageGomeetFaker() *EnumMessage {
	this := &EnumMessage{}
	this.RandEnum = SomeEnum([]int32{0, 1, 2, 3, 4}[GomeetFakerRand().Intn(5)])
	this.FirstEnumUnknow = SomeEnum(0)
	this.LastEnumD = SomeEnum(4)
	this.EnumA = SomeEnum(1)
	this.EnumB = SomeEnum(2)
	this.EnumC = SomeEnum(3)
	this.EnumD = SomeEnum(4)
	// this.EEnum 5 out of range 0-4 // skipped
	this.VEnumA = SomeEnum(1)
	this.VEnumB = SomeEnum(2)
	this.VEnumC = SomeEnum(3)
	this.VEnumD = SomeEnum(4)
	// this.VEEnum  =  SomeEnum(5) // skipped isn't a value of enum
	this.NestedRandEnum = EnumMessage_NestedEnum([]int32{0, 1, 2, 5}[GomeetFakerRand().Intn(4)])
	this.NestedFirstEnumU = EnumMessage_NestedEnum(0)
	this.NestedLastEnumD = EnumMessage_NestedEnum(5)
	this.NestedEnumA = EnumMessage_NestedEnum(1)
	this.NestedEnumB = EnumMessage_NestedEnum(2)
	this.NestedEnumE = EnumMessage_NestedEnum(5)
	// this.NestedEEnum 5 out of range 0-3 // skipped
	this.NestedVEnumA = EnumMessage_NestedEnum(1)
	this.NestedVEnumB = EnumMessage_NestedEnum(2)
	// this.NestedVEEnumE  =  EnumMessage_NestedEnum(3) // skipped isn't a value of enum
	this.NestedVEnumE = EnumMessage_NestedEnum(5)
	for i := 0; i < 3; i++ {
		aCurrentRRandEnum := SomeEnum([]int32{0, 1, 2, 3, 4}[GomeetFakerRand().Intn(5)])
		this.RRandEnum = append(this.RRandEnum, aCurrentRRandEnum)
	}
	for i := 0; i < 3; i++ {
		aCurrentRFirstEnumUnknow := SomeEnum(0)
		this.RFirstEnumUnknow = append(this.RFirstEnumUnknow, aCurrentRFirstEnumUnknow)
	}
	for i := 0; i < 3; i++ {
		aCurrentRLastEnumD := SomeEnum(4)
		this.RLastEnumD = append(this.RLastEnumD, aCurrentRLastEnumD)
	}
	for i := 0; i < 3; i++ {
		aCurrentREnumA := SomeEnum(1)
		this.REnumA = append(this.REnumA, aCurrentREnumA)
	}
	for i := 0; i < 3; i++ {
		aCurrentREnumB := SomeEnum(2)
		this.REnumB = append(this.REnumB, aCurrentREnumB)
	}
	for i := 0; i < 3; i++ {
		aCurrentREnumC := SomeEnum(3)
		this.REnumC = append(this.REnumC, aCurrentREnumC)
	}
	for i := 0; i < 3; i++ {
		aCurrentREnumD := SomeEnum(4)
		this.REnumD = append(this.REnumD, aCurrentREnumD)
	}
	for i := 0; i < 3; i++ {
		// aCurrentREEnum 5 out of range 0-4 // skipped
		// this.REEnum = append(this.REEnum, aCurrentREEnum) // skipped
	}
	for i := 0; i < 3; i++ {
		aCurrentRVEnumA := SomeEnum(1)
		this.RVEnumA = append(this.RVEnumA, aCurrentRVEnumA)
	}
	for i := 0; i < 3; i++ {
		aCurrentRVEnumB := SomeEnum(2)
		this.RVEnumB = append(this.RVEnumB, aCurrentRVEnumB)
	}
	for i := 0; i < 3; i++ {
		aCurrentRVEnumC := SomeEnum(3)
		this.RVEnumC = append(this.RVEnumC, aCurrentRVEnumC)
	}
	for i := 0; i < 3; i++ {
		aCurrentRVEnumD := SomeEnum(4)
		this.RVEnumD = append(this.RVEnumD, aCurrentRVEnumD)
	}
	for i := 0; i < 3; i++ {
		// aCurrentRVEEnum  :=  SomeEnum(5) // skipped isn't a value of enum
		// this.RVEEnum = append(this.RVEEnum, aCurrentRVEEnum) // skipped
	}
	for i := 0; i < 3; i++ {
		aCurrentRNestedRandEnum := EnumMessage_NestedEnum([]int32{0, 1, 2, 5}[GomeetFakerRand().Intn(4)])
		this.RNestedRandEnum = append(this.RNestedRandEnum, aCurrentRNestedRandEnum)
	}
	for i := 0; i < 3; i++ {
		aCurrentRNestedFirstEnumU := EnumMessage_NestedEnum(0)
		this.RNestedFirstEnumU = append(this.RNestedFirstEnumU, aCurrentRNestedFirstEnumU)
	}
	for i := 0; i < 3; i++ {
		aCurrentRNestedLastEnumD := EnumMessage_NestedEnum(5)
		this.RNestedLastEnumD = append(this.RNestedLastEnumD, aCurrentRNestedLastEnumD)
	}
	for i := 0; i < 3; i++ {
		aCurrentRNestedEnumA := EnumMessage_NestedEnum(1)
		this.RNestedEnumA = append(this.RNestedEnumA, aCurrentRNestedEnumA)
	}
	for i := 0; i < 3; i++ {
		aCurrentRNestedEnumB := EnumMessage_NestedEnum(2)
		this.RNestedEnumB = append(this.RNestedEnumB, aCurrentRNestedEnumB)
	}
	for i := 0; i < 3; i++ {
		aCurrentRNestedEnumE := EnumMessage_NestedEnum(5)
		this.RNestedEnumE = append(this.RNestedEnumE, aCurrentRNestedEnumE)
	}
	for i := 0; i < 3; i++ {
		// aCurrentRNestedEEnum 5 out of range 0-3 // skipped
		// this.RNestedEEnum = append(this.RNestedEEnum, aCurrentRNestedEEnum) // skipped
	}
	for i := 0; i < 3; i++ {
		aCurrentRNestedVEnumA := EnumMessage_NestedEnum(1)
		this.RNestedVEnumA = append(this.RNestedVEnumA, aCurrentRNestedVEnumA)
	}
	for i := 0; i < 3; i++ {
		aCurrentRNestedVEnumB := EnumMessage_NestedEnum(2)
		this.RNestedVEnumB = append(this.RNestedVEnumB, aCurrentRNestedVEnumB)
	}
	for i := 0; i < 3; i++ {
		// aCurrentRNestedVEEnumE  :=  EnumMessage_NestedEnum(3) // skipped isn't a value of enum
		// this.RNestedVEEnumE = append(this.RNestedVEEnumE, aCurrentRNestedVEEnumE) // skipped
	}
	for i := 0; i < 3; i++ {
		aCurrentRNestedVEnumE := EnumMessage_NestedEnum(5)
		this.RNestedVEnumE = append(this.RNestedVEnumE, aCurrentRNestedVEnumE)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2RandEnum := SomeEnum([]int32{0, 1, 2, 3, 4}[GomeetFakerRand().Intn(5)])
		this.R2RandEnum = append(this.R2RandEnum, aCurrentR2RandEnum)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2FirstEnumUnknow := SomeEnum(0)
		this.R2FirstEnumUnknow = append(this.R2FirstEnumUnknow, aCurrentR2FirstEnumUnknow)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2LastEnumD := SomeEnum(4)
		this.R2LastEnumD = append(this.R2LastEnumD, aCurrentR2LastEnumD)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2EnumA := SomeEnum(1)
		this.R2EnumA = append(this.R2EnumA, aCurrentR2EnumA)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2EnumB := SomeEnum(2)
		this.R2EnumB = append(this.R2EnumB, aCurrentR2EnumB)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2EnumC := SomeEnum(3)
		this.R2EnumC = append(this.R2EnumC, aCurrentR2EnumC)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2EnumD := SomeEnum(4)
		this.R2EnumD = append(this.R2EnumD, aCurrentR2EnumD)
	}
	for i := 0; i < 5; i++ {
		// aCurrentR2EEnum 5 out of range 0-4 // skipped
		// this.R2EEnum = append(this.R2EEnum, aCurrentR2EEnum) // skipped
	}
	for i := 0; i < 5; i++ {
		aCurrentR2VEnumA := SomeEnum(1)
		this.R2VEnumA = append(this.R2VEnumA, aCurrentR2VEnumA)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2VEnumB := SomeEnum(2)
		this.R2VEnumB = append(this.R2VEnumB, aCurrentR2VEnumB)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2VEnumC := SomeEnum(3)
		this.R2VEnumC = append(this.R2VEnumC, aCurrentR2VEnumC)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2VEnumD := SomeEnum(4)
		this.R2VEnumD = append(this.R2VEnumD, aCurrentR2VEnumD)
	}
	for i := 0; i < 5; i++ {
		// aCurrentR2VEEnum  :=  SomeEnum(5) // skipped isn't a value of enum
		// this.R2VEEnum = append(this.R2VEEnum, aCurrentR2VEEnum) // skipped
	}
	for i := 0; i < 5; i++ {
		aCurrentR2NestedRandEnum := EnumMessage_NestedEnum([]int32{0, 1, 2, 5}[GomeetFakerRand().Intn(4)])
		this.R2NestedRandEnum = append(this.R2NestedRandEnum, aCurrentR2NestedRandEnum)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2NestedFirstEnumU := EnumMessage_NestedEnum(0)
		this.R2NestedFirstEnumU = append(this.R2NestedFirstEnumU, aCurrentR2NestedFirstEnumU)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2NestedLastEnumD := EnumMessage_NestedEnum(5)
		this.R2NestedLastEnumD = append(this.R2NestedLastEnumD, aCurrentR2NestedLastEnumD)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2NestedEnumA := EnumMessage_NestedEnum(1)
		this.R2NestedEnumA = append(this.R2NestedEnumA, aCurrentR2NestedEnumA)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2NestedEnumB := EnumMessage_NestedEnum(2)
		this.R2NestedEnumB = append(this.R2NestedEnumB, aCurrentR2NestedEnumB)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2NestedEnumE := EnumMessage_NestedEnum(5)
		this.R2NestedEnumE = append(this.R2NestedEnumE, aCurrentR2NestedEnumE)
	}
	for i := 0; i < 5; i++ {
		// aCurrentR2NestedEEnum 5 out of range 0-3 // skipped
		// this.R2NestedEEnum = append(this.R2NestedEEnum, aCurrentR2NestedEEnum) // skipped
	}
	for i := 0; i < 5; i++ {
		aCurrentR2NestedVEnumA := EnumMessage_NestedEnum(1)
		this.R2NestedVEnumA = append(this.R2NestedVEnumA, aCurrentR2NestedVEnumA)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2NestedVEnumB := EnumMessage_NestedEnum(2)
		this.R2NestedVEnumB = append(this.R2NestedVEnumB, aCurrentR2NestedVEnumB)
	}
	for i := 0; i < 5; i++ {
		// aCurrentR2NestedVEEnumE  :=  EnumMessage_NestedEnum(3) // skipped isn't a value of enum
		// this.R2NestedVEEnumE = append(this.R2NestedVEEnumE, aCurrentR2NestedVEEnumE) // skipped
	}
	for i := 0; i < 5; i++ {
		aCurrentR2NestedVEnumE := EnumMessage_NestedEnum(5)
		this.R2NestedVEnumE = append(this.R2NestedVEnumE, aCurrentR2NestedVEnumE)
	}
	this.RandNoEmptyEnum = SomeEnum([]int32{1, 2, 3, 4}[GomeetFakerRand().Intn(4)])
	this.NestedRandNoEmptyEnum = EnumMessage_NestedEnum([]int32{1, 2, 5}[GomeetFakerRand().Intn(3)])
	for i := 0; i < 3; i++ {
		aCurrentRRandNoEmptyEnum := SomeEnum([]int32{1, 2, 3, 4}[GomeetFakerRand().Intn(4)])
		this.RRandNoEmptyEnum = append(this.RRandNoEmptyEnum, aCurrentRRandNoEmptyEnum)
	}
	for i := 0; i < 3; i++ {
		aCurrentRNestedRandNoEmptyEnum := EnumMessage_NestedEnum([]int32{1, 2, 5}[GomeetFakerRand().Intn(3)])
		this.RNestedRandNoEmptyEnum = append(this.RNestedRandNoEmptyEnum, aCurrentRNestedRandNoEmptyEnum)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2RandNoEmptyEnum := SomeEnum([]int32{1, 2, 3, 4}[GomeetFakerRand().Intn(4)])
		this.R2RandNoEmptyEnum = append(this.R2RandNoEmptyEnum, aCurrentR2RandNoEmptyEnum)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2NestedRandNoEmptyEnum := EnumMessage_NestedEnum([]int32{1, 2, 5}[GomeetFakerRand().Intn(3)])
		this.R2NestedRandNoEmptyEnum = append(this.R2NestedRandNoEmptyEnum, aCurrentR2NestedRandNoEmptyEnum)
	}
	return this
}

func NewComplexMessageGomeetFaker() *ComplexMessage {
	this := &ComplexMessage{}
	oneofNumber_AddressInfo := []int32{1, 2, 3, 4}[GomeetFakerRand().Intn(4)]
	switch oneofNumber_AddressInfo {
	case 1:
		var aOneOf_AddressInfo = faker.Address().City()
		// ComplexMessage_City
		this.AddressInfo = &ComplexMessage_City{aOneOf_AddressInfo}
	case 2:
		var aOneOf_AddressInfo = faker.Address().StreetName()
		// ComplexMessage_StreetName
		this.AddressInfo = &ComplexMessage_StreetName{aOneOf_AddressInfo}
	case 3:
		// var aOneOf_AddressInfo is a string or bytes without gommetfaker rules so faker.Lorem().Lorem() is used
		var aOneOf_AddressInfo = faker.Lorem().String()
		// ComplexMessage_StringNoGomeetfakerRules
		this.AddressInfo = &ComplexMessage_StringNoGomeetfakerRules{aOneOf_AddressInfo}
	case 4:
		// var aOneOf_AddressInfo is a number value without gommetfaker rules so a random true/false is used
		var aOneOf_AddressInfo = []bool{true, false}[GomeetFakerRand().Intn(2)]
		// ComplexMessage_BoolNoGomeetFakerRules
		this.AddressInfo = &ComplexMessage_BoolNoGomeetFakerRules{aOneOf_AddressInfo}
	}
	this.Name = faker.Name().Name()
	for i := 0; i < 10; i++ {
		aCurrentCitations := faker.Lorem().String()
		this.Citations = append(this.Citations, aCurrentCitations)
	}
	this.Description = strings.Join(faker.Hacker().Phrases(), " ")
	// this.NoGomeetfaker is a number value without gommetfaker rules so a random true/false is used
	this.NoGomeetfaker = []bool{true, false}[GomeetFakerRand().Intn(2)]
	return this
}

func NewWithoutFakerMessageGomeetFaker() *WithoutFakerMessage {
	this := &WithoutFakerMessage{}
	// this.DoubleValue is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseFloat(faker.Number().Number(3), 64); err == nil {
		this.DoubleValue = float64(v)
	}
	// this.FloatValue is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseFloat(faker.Number().Number(3), 32); err == nil {
		this.FloatValue = float32(v)
	}
	// this.Int32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
		this.Int32Value = int32(v)
	}
	// this.Int64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
		this.Int64Value = int64(v)
	}
	// this.Uint32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 32); err == nil {
		this.Uint32Value = uint32(v)
	}
	// this.Uint64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 64); err == nil {
		this.Uint64Value = uint64(v)
	}
	// this.Sint32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
		this.Sint32Value = int32(v)
	}
	// this.Sint64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
		this.Sint64Value = int64(v)
	}
	// this.Fixed32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 32); err == nil {
		this.Fixed32Value = uint32(v)
	}
	// this.Fixed64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 64); err == nil {
		this.Fixed64Value = uint64(v)
	}
	// this.Sfixed32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
		this.Sfixed32Value = int32(v)
	}
	// this.Sfixed64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
		this.Sfixed64Value = int64(v)
	}
	// this.BoolValue is a number value without gommetfaker rules so a random true/false is used
	this.BoolValue = []bool{true, false}[GomeetFakerRand().Intn(2)]
	// this.StringValue is a string or bytes without gommetfaker rules so faker.Lorem().Lorem() is used
	this.StringValue = faker.Lorem().String()
	// this.BytesValue is a string or bytes without gommetfaker rules so faker.Lorem().Lorem() is used
	this.BytesValue = []byte(faker.Lorem().String())
	// this.RDoubleValue is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Number(3), 64); err == nil {
			this.RDoubleValue = append(this.RDoubleValue, float64(v))
		}
		// this.RDoubleValue = append(this.RDoubleValue, aCurrentRDoubleValue) // skipped
	}
	// this.RFloatValue is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Number(3), 32); err == nil {
			this.RFloatValue = append(this.RFloatValue, float32(v))
		}
		// this.RFloatValue = append(this.RFloatValue, aCurrentRFloatValue) // skipped
	}
	// this.RInt32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
			this.RInt32Value = append(this.RInt32Value, int32(v))
		}
		// this.RInt32Value = append(this.RInt32Value, aCurrentRInt32Value) // skipped
	}
	// this.RInt64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
			this.RInt64Value = append(this.RInt64Value, int64(v))
		}
		// this.RInt64Value = append(this.RInt64Value, aCurrentRInt64Value) // skipped
	}
	// this.RUint32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 32); err == nil {
			this.RUint32Value = append(this.RUint32Value, uint32(v))
		}
		// this.RUint32Value = append(this.RUint32Value, aCurrentRUint32Value) // skipped
	}
	// this.RUint64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 64); err == nil {
			this.RUint64Value = append(this.RUint64Value, uint64(v))
		}
		// this.RUint64Value = append(this.RUint64Value, aCurrentRUint64Value) // skipped
	}
	// this.RSint32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
			this.RSint32Value = append(this.RSint32Value, int32(v))
		}
		// this.RSint32Value = append(this.RSint32Value, aCurrentRSint32Value) // skipped
	}
	// this.RSint64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
			this.RSint64Value = append(this.RSint64Value, int64(v))
		}
		// this.RSint64Value = append(this.RSint64Value, aCurrentRSint64Value) // skipped
	}
	// this.RFixed32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 32); err == nil {
			this.RFixed32Value = append(this.RFixed32Value, uint32(v))
		}
		// this.RFixed32Value = append(this.RFixed32Value, aCurrentRFixed32Value) // skipped
	}
	// this.RFixed64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 64); err == nil {
			this.RFixed64Value = append(this.RFixed64Value, uint64(v))
		}
		// this.RFixed64Value = append(this.RFixed64Value, aCurrentRFixed64Value) // skipped
	}
	// this.RSfixed32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
			this.RSfixed32Value = append(this.RSfixed32Value, int32(v))
		}
		// this.RSfixed32Value = append(this.RSfixed32Value, aCurrentRSfixed32Value) // skipped
	}
	// this.RSfixed64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
			this.RSfixed64Value = append(this.RSfixed64Value, int64(v))
		}
		// this.RSfixed64Value = append(this.RSfixed64Value, aCurrentRSfixed64Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRBoolValue is a number value without gommetfaker rules so a random true/false is used
		aCurrentRBoolValue := []bool{true, false}[GomeetFakerRand().Intn(2)]
		this.RBoolValue = append(this.RBoolValue, aCurrentRBoolValue)
	}
	// this.RStringValue is a string or bytes without gommetfaker rules so faker.Lorem().Lorem() is used
	for i := 0; i < 3; i++ {
		aCurrentRStringValue := faker.Lorem().String()
		this.RStringValue = append(this.RStringValue, aCurrentRStringValue)
	}
	// this.RBytesValue is a string or bytes without gommetfaker rules so faker.Lorem().Lorem() is used
	for i := 0; i < 3; i++ {
		aCurrentRBytesValue := []byte(faker.Lorem().String())
		this.RBytesValue = append(this.RBytesValue, aCurrentRBytesValue)
	}
	return this
}

func NewSkipFakerMessageGomeetFaker() *SkipFakerMessage {
	this := &SkipFakerMessage{}
	// this.DoubleValue // skipped by skip rules
	// this.FloatValue // skipped by skip rules
	// this.Int32Value // skipped by skip rules
	// this.Int64Value // skipped by skip rules
	// this.Uint32Value // skipped by skip rules
	// this.Uint64Value // skipped by skip rules
	// this.Sint32Value // skipped by skip rules
	// this.Sint64Value // skipped by skip rules
	// this.Fixed32Value // skipped by skip rules
	// this.Fixed64Value // skipped by skip rules
	// this.Sfixed32Value // skipped by skip rules
	// this.Sfixed64Value // skipped by skip rules
	// this.BoolValue // skipped by skip rules
	// this.StringValue // skipped by skip rules
	// this.BytesValue // skipped by skip rules
	// this.RDoubleValue // skipped by skip rules
	// this.RFloatValue // skipped by skip rules
	// this.RInt32Value // skipped by skip rules
	// this.RInt64Value // skipped by skip rules
	// this.RUint32Value // skipped by skip rules
	// this.RUint64Value // skipped by skip rules
	// this.RSint32Value // skipped by skip rules
	// this.RSint64Value // skipped by skip rules
	// this.RFixed32Value // skipped by skip rules
	// this.RFixed64Value // skipped by skip rules
	// this.RSfixed32Value // skipped by skip rules
	// this.RSfixed64Value // skipped by skip rules
	// this.RBoolValue // skipped by skip rules
	// this.RStringValue // skipped by skip rules
	// this.RBytesValue // skipped by skip rules
	return this
}

func NewScalarRepeatedRulesOnlyMessageGomeetFaker() *ScalarRepeatedRulesOnlyMessage {
	this := &ScalarRepeatedRulesOnlyMessage{}
	// this.RDoubleValue is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Number(3), 64); err == nil {
			this.RDoubleValue = append(this.RDoubleValue, float64(v))
		}
		// this.RDoubleValue = append(this.RDoubleValue, aCurrentRDoubleValue) // skipped
	}
	// this.RFloatValue is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Number(3), 32); err == nil {
			this.RFloatValue = append(this.RFloatValue, float32(v))
		}
		// this.RFloatValue = append(this.RFloatValue, aCurrentRFloatValue) // skipped
	}
	// this.RInt32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
			this.RInt32Value = append(this.RInt32Value, int32(v))
		}
		// this.RInt32Value = append(this.RInt32Value, aCurrentRInt32Value) // skipped
	}
	// this.RInt64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
			this.RInt64Value = append(this.RInt64Value, int64(v))
		}
		// this.RInt64Value = append(this.RInt64Value, aCurrentRInt64Value) // skipped
	}
	// this.RUint32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 32); err == nil {
			this.RUint32Value = append(this.RUint32Value, uint32(v))
		}
		// this.RUint32Value = append(this.RUint32Value, aCurrentRUint32Value) // skipped
	}
	// this.RUint64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 64); err == nil {
			this.RUint64Value = append(this.RUint64Value, uint64(v))
		}
		// this.RUint64Value = append(this.RUint64Value, aCurrentRUint64Value) // skipped
	}
	// this.RSint32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
			this.RSint32Value = append(this.RSint32Value, int32(v))
		}
		// this.RSint32Value = append(this.RSint32Value, aCurrentRSint32Value) // skipped
	}
	// this.RSint64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
			this.RSint64Value = append(this.RSint64Value, int64(v))
		}
		// this.RSint64Value = append(this.RSint64Value, aCurrentRSint64Value) // skipped
	}
	// this.RFixed32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 32); err == nil {
			this.RFixed32Value = append(this.RFixed32Value, uint32(v))
		}
		// this.RFixed32Value = append(this.RFixed32Value, aCurrentRFixed32Value) // skipped
	}
	// this.RFixed64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 64); err == nil {
			this.RFixed64Value = append(this.RFixed64Value, uint64(v))
		}
		// this.RFixed64Value = append(this.RFixed64Value, aCurrentRFixed64Value) // skipped
	}
	// this.RSfixed32Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
			this.RSfixed32Value = append(this.RSfixed32Value, int32(v))
		}
		// this.RSfixed32Value = append(this.RSfixed32Value, aCurrentRSfixed32Value) // skipped
	}
	// this.RSfixed64Value is a number value without gommetfaker rules so faker.Number().Number(3) is used
	for i := 0; i < 5; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
			this.RSfixed64Value = append(this.RSfixed64Value, int64(v))
		}
		// this.RSfixed64Value = append(this.RSfixed64Value, aCurrentRSfixed64Value) // skipped
	}
	for i := 0; i < 5; i++ {
		// aCurrentRBoolValue is a number value without gommetfaker rules so a random true/false is used
		aCurrentRBoolValue := []bool{true, false}[GomeetFakerRand().Intn(2)]
		this.RBoolValue = append(this.RBoolValue, aCurrentRBoolValue)
	}
	// this.RStringValue is a string or bytes without gommetfaker rules so faker.Lorem().Lorem() is used
	for i := 0; i < 5; i++ {
		aCurrentRStringValue := faker.Lorem().String()
		this.RStringValue = append(this.RStringValue, aCurrentRStringValue)
	}
	// this.RBytesValue is a string or bytes without gommetfaker rules so faker.Lorem().Lorem() is used
	for i := 0; i < 5; i++ {
		aCurrentRBytesValue := []byte(faker.Lorem().String())
		this.RBytesValue = append(this.RBytesValue, aCurrentRBytesValue)
	}
	return this
}

func NewValueMessageGomeetFaker() *ValueMessage {
	this := &ValueMessage{}
	this.DoubleValue = float64(13.42)
	this.FloatValue = float32(13.42)
	this.Int32Value = int32(13)
	this.Int64Value = int64(13)
	this.Uint32Value = uint32(13)
	this.Uint64Value = uint64(13)
	this.Sint32Value = int32(13)
	this.Sint64Value = int64(13)
	this.Fixed32Value = uint32(13)
	this.Fixed64Value = uint64(13)
	this.Sfixed32Value = int32(13)
	this.Sfixed64Value = int64(13)
	this.BoolValue = true
	this.StringValue = "lorem ipsum"
	this.BytesValue = []byte("lorem ipsum")
	// this.ErrDoubleValue  =  float64(not a float64) // skipped bad type convertion - strconv.ParseFloat: parsing "not a float64": invalid syntax
	// this.ErrFloatValue  =  float32(not a float32) // skipped bad type convertion - strconv.ParseFloat: parsing "not a float32": invalid syntax
	// this.ErrInt32Value  =  int32(not a int32) // skipped bad type convertion - strconv.ParseInt: parsing "not a int32": invalid syntax
	// this.ErrInt64Value  =  int64(not a int64) // skipped bad type convertion - strconv.ParseInt: parsing "not a int64": invalid syntax
	// this.ErrUint32Value  =  uint32(not a uint32) // skipped bad type convertion - strconv.ParseUint: parsing "not a uint32": invalid syntax
	// this.ErrUint64Value  =  uint64(not a uint32) // skipped bad type convertion - strconv.ParseUint: parsing "not a uint32": invalid syntax
	// this.ErrSint32Value  =  int32(not a int32) // skipped bad type convertion - strconv.ParseInt: parsing "not a int32": invalid syntax
	// this.ErrSint64Value  =  int64(not a int64) // skipped bad type convertion - strconv.ParseInt: parsing "not a int64": invalid syntax
	// this.ErrFixed32Value  =  uint32(not a uint32) // skipped bad type convertion - strconv.ParseUint: parsing "not a uint32": invalid syntax
	// this.ErrFixed64Value  =  uint64(not a uint64) // skipped bad type convertion - strconv.ParseUint: parsing "not a uint64": invalid syntax
	// this.ErrSfixed32Value  =  int32(not a int32) // skipped bad type convertion - strconv.ParseInt: parsing "not a int32": invalid syntax
	// this.ErrSfixed64Value  =  int64(not a int64) // skipped bad type convertion - strconv.ParseInt: parsing "not a int64": invalid syntax
	// this.ErrBoolValue  =  not a float64 // skipped bad type convertion - strconv.ParseBool: parsing "not a float64": invalid syntax
	for i := 0; i < 3; i++ {
		aCurrentRDoubleValue := float64(13.42)
		this.RDoubleValue = append(this.RDoubleValue, aCurrentRDoubleValue)
	}
	for i := 0; i < 3; i++ {
		aCurrentRFloatValue := float32(13.42)
		this.RFloatValue = append(this.RFloatValue, aCurrentRFloatValue)
	}
	for i := 0; i < 3; i++ {
		aCurrentRInt32Value := int32(13)
		this.RInt32Value = append(this.RInt32Value, aCurrentRInt32Value)
	}
	for i := 0; i < 3; i++ {
		aCurrentRInt64Value := int64(13)
		this.RInt64Value = append(this.RInt64Value, aCurrentRInt64Value)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUint32Value := uint32(13)
		this.RUint32Value = append(this.RUint32Value, aCurrentRUint32Value)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUint64Value := uint64(13)
		this.RUint64Value = append(this.RUint64Value, aCurrentRUint64Value)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSint32Value := int32(13)
		this.RSint32Value = append(this.RSint32Value, aCurrentRSint32Value)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSint64Value := int64(13)
		this.RSint64Value = append(this.RSint64Value, aCurrentRSint64Value)
	}
	for i := 0; i < 3; i++ {
		aCurrentRFixed32Value := uint32(13)
		this.RFixed32Value = append(this.RFixed32Value, aCurrentRFixed32Value)
	}
	for i := 0; i < 3; i++ {
		aCurrentRFixed64Value := uint64(13)
		this.RFixed64Value = append(this.RFixed64Value, aCurrentRFixed64Value)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSfixed32Value := int32(13)
		this.RSfixed32Value = append(this.RSfixed32Value, aCurrentRSfixed32Value)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSfixed64Value := int64(13)
		this.RSfixed64Value = append(this.RSfixed64Value, aCurrentRSfixed64Value)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBoolValue := true
		this.RBoolValue = append(this.RBoolValue, aCurrentRBoolValue)
	}
	for i := 0; i < 3; i++ {
		aCurrentRStringValue := "lorem ipsum"
		this.RStringValue = append(this.RStringValue, aCurrentRStringValue)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesValue := []byte("lorem ipsum")
		this.RBytesValue = append(this.RBytesValue, aCurrentRBytesValue)
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrDoubleValue  :=  float64(not a float64) // skipped bad type convertion - strconv.ParseFloat: parsing "not a float64": invalid syntax
		// this.RErrDoubleValue = append(this.RErrDoubleValue, aCurrentRErrDoubleValue) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrFloatValue  :=  float32(not a float32) // skipped bad type convertion - strconv.ParseFloat: parsing "not a float32": invalid syntax
		// this.RErrFloatValue = append(this.RErrFloatValue, aCurrentRErrFloatValue) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrInt32Value  :=  int32(not a int32) // skipped bad type convertion - strconv.ParseInt: parsing "not a int32": invalid syntax
		// this.RErrInt32Value = append(this.RErrInt32Value, aCurrentRErrInt32Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrInt64Value  :=  int64(not a int64) // skipped bad type convertion - strconv.ParseInt: parsing "not a int64": invalid syntax
		// this.RErrInt64Value = append(this.RErrInt64Value, aCurrentRErrInt64Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrUint32Value  :=  uint32(not a uint32) // skipped bad type convertion - strconv.ParseUint: parsing "not a uint32": invalid syntax
		// this.RErrUint32Value = append(this.RErrUint32Value, aCurrentRErrUint32Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrUint64Value  :=  uint64(not a uint32) // skipped bad type convertion - strconv.ParseUint: parsing "not a uint32": invalid syntax
		// this.RErrUint64Value = append(this.RErrUint64Value, aCurrentRErrUint64Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrSint32Value  :=  int32(not a int32) // skipped bad type convertion - strconv.ParseInt: parsing "not a int32": invalid syntax
		// this.RErrSint32Value = append(this.RErrSint32Value, aCurrentRErrSint32Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrSint64Value  :=  int64(not a int64) // skipped bad type convertion - strconv.ParseInt: parsing "not a int64": invalid syntax
		// this.RErrSint64Value = append(this.RErrSint64Value, aCurrentRErrSint64Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrFixed32Value  :=  uint32(not a uint32) // skipped bad type convertion - strconv.ParseUint: parsing "not a uint32": invalid syntax
		// this.RErrFixed32Value = append(this.RErrFixed32Value, aCurrentRErrFixed32Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrFixed64Value  :=  uint64(not a uint64) // skipped bad type convertion - strconv.ParseUint: parsing "not a uint64": invalid syntax
		// this.RErrFixed64Value = append(this.RErrFixed64Value, aCurrentRErrFixed64Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrSfixed32Value  :=  int32(not a int32) // skipped bad type convertion - strconv.ParseInt: parsing "not a int32": invalid syntax
		// this.RErrSfixed32Value = append(this.RErrSfixed32Value, aCurrentRErrSfixed32Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrSfixed64Value  :=  int64(not a int64) // skipped bad type convertion - strconv.ParseInt: parsing "not a int64": invalid syntax
		// this.RErrSfixed64Value = append(this.RErrSfixed64Value, aCurrentRErrSfixed64Value) // skipped
	}
	for i := 0; i < 3; i++ {
		// aCurrentRErrBoolValue  :=  not a float64 // skipped bad type convertion - strconv.ParseBool: parsing "not a float64": invalid syntax
		// this.RErrBoolValue = append(this.RErrBoolValue, aCurrentRErrBoolValue) // skipped
	}
	for i := 0; i < 5; i++ {
		aCurrentR2DoubleValue := float64(13.42)
		this.R2DoubleValue = append(this.R2DoubleValue, aCurrentR2DoubleValue)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2FloatValue := float32(13.42)
		this.R2FloatValue = append(this.R2FloatValue, aCurrentR2FloatValue)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Int32Value := int32(13)
		this.R2Int32Value = append(this.R2Int32Value, aCurrentR2Int32Value)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Int64Value := int64(13)
		this.R2Int64Value = append(this.R2Int64Value, aCurrentR2Int64Value)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Uint32Value := uint32(13)
		this.R2Uint32Value = append(this.R2Uint32Value, aCurrentR2Uint32Value)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Uint64Value := uint64(13)
		this.R2Uint64Value = append(this.R2Uint64Value, aCurrentR2Uint64Value)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Sint32Value := int32(13)
		this.R2Sint32Value = append(this.R2Sint32Value, aCurrentR2Sint32Value)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Sint64Value := int64(13)
		this.R2Sint64Value = append(this.R2Sint64Value, aCurrentR2Sint64Value)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Fixed32Value := uint32(13)
		this.R2Fixed32Value = append(this.R2Fixed32Value, aCurrentR2Fixed32Value)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Fixed64Value := uint64(13)
		this.R2Fixed64Value = append(this.R2Fixed64Value, aCurrentR2Fixed64Value)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Sfixed32Value := int32(13)
		this.R2Sfixed32Value = append(this.R2Sfixed32Value, aCurrentR2Sfixed32Value)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Sfixed64Value := int64(13)
		this.R2Sfixed64Value = append(this.R2Sfixed64Value, aCurrentR2Sfixed64Value)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2BoolValue := true
		this.R2BoolValue = append(this.R2BoolValue, aCurrentR2BoolValue)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2StringValue := "lorem ipsum"
		this.R2StringValue = append(this.R2StringValue, aCurrentR2StringValue)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2BytesValue := []byte("lorem ipsum")
		this.R2BytesValue = append(this.R2BytesValue, aCurrentR2BytesValue)
	}
	return this
}

func NewUuidMessageGomeetFaker() *UuidMessage {
	this := &UuidMessage{}
	if aUuid, err := uuid.NewUUID(); err == nil {
		this.StringUuidV1 = aUuid.String()
	}
	this.StringUuidV4 = uuid.New().String()
	if aUuid, err := uuid.NewUUID(); err == nil {
		this.BytesUuidV1 = []byte(aUuid.String())
	}
	this.BytesUuidV4 = []byte(uuid.New().String())
	for i := 0; i < 3; i++ {
		if aUuid, err := uuid.NewUUID(); err == nil {
			aCurrentRStringUuidV1 := aUuid.String()
			this.RStringUuidV1 = append(this.RStringUuidV1, aCurrentRStringUuidV1)
		}
	}
	for i := 0; i < 3; i++ {
		aCurrentRStringUuidV4 := uuid.New().String()
		this.RStringUuidV4 = append(this.RStringUuidV4, aCurrentRStringUuidV4)
	}
	for i := 0; i < 3; i++ {
		if aUuid, err := uuid.NewUUID(); err == nil {
			aCurrentRBytesUuidV1 := []byte(aUuid.String())
			this.RBytesUuidV1 = append(this.RBytesUuidV1, aCurrentRBytesUuidV1)
		}
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesUuidV4 := []byte(uuid.New().String())
		this.RBytesUuidV4 = append(this.RBytesUuidV4, aCurrentRBytesUuidV4)
	}
	for i := 0; i < 5; i++ {
		if aUuid, err := uuid.NewUUID(); err == nil {
			aCurrentR2StringUuidV1 := aUuid.String()
			this.R2StringUuidV1 = append(this.R2StringUuidV1, aCurrentR2StringUuidV1)
		}
	}
	for i := 0; i < 5; i++ {
		aCurrentR2StringUuidV4 := uuid.New().String()
		this.R2StringUuidV4 = append(this.R2StringUuidV4, aCurrentR2StringUuidV4)
	}
	for i := 0; i < 5; i++ {
		if aUuid, err := uuid.NewUUID(); err == nil {
			aCurrentR2BytesUuidV1 := []byte(aUuid.String())
			this.R2BytesUuidV1 = append(this.R2BytesUuidV1, aCurrentR2BytesUuidV1)
		}
	}
	for i := 0; i < 5; i++ {
		aCurrentR2BytesUuidV4 := []byte(uuid.New().String())
		this.R2BytesUuidV4 = append(this.R2BytesUuidV4, aCurrentR2BytesUuidV4)
	}
	return this
}

func NewAddressMessageGomeetFaker() *AddressMessage {
	this := &AddressMessage{}
	this.City = faker.Address().City()
	this.StreetName = faker.Address().StreetName()
	this.StreetAddress = faker.Address().StreetAddress()
	this.SecondaryAddress = faker.Address().SecondaryAddress()
	this.BuildingNumber = faker.Address().BuildingNumber()
	this.Postcode = faker.Address().Postcode()
	this.PostcodeByState = faker.Address().PostcodeByState("IN")
	this.ZipCode = faker.Address().ZipCode()
	this.ZipCodeByState = faker.Address().ZipCodeByState("IN")
	this.TimeZone = faker.Address().TimeZone()
	this.CityPrefix = faker.Address().CityPrefix()
	this.CitySuffix = faker.Address().CitySuffix()
	this.StreetSuffix = faker.Address().StreetSuffix()
	this.State = faker.Address().State()
	this.StateAbbr = faker.Address().StateAbbr()
	this.Country = faker.Address().Country()
	this.CountryCode = faker.Address().CountryCode()
	this.Latitude = faker.Address().Latitude()
	this.Longitude = faker.Address().Longitude()
	this.String_ = faker.Address().String()
	this.BytesCity = []byte(faker.Address().City())
	this.BytesStreetName = []byte(faker.Address().StreetName())
	this.BytesStreetAddress = []byte(faker.Address().StreetAddress())
	this.BytesSecondaryAddress = []byte(faker.Address().SecondaryAddress())
	this.BytesBuildingNumber = []byte(faker.Address().BuildingNumber())
	this.BytesPostcode = []byte(faker.Address().Postcode())
	this.BytesPostcodeByState = []byte(faker.Address().PostcodeByState("IN"))
	this.BytesZipCode = []byte(faker.Address().ZipCode())
	this.BytesZipCodeByState = []byte(faker.Address().ZipCodeByState("IN"))
	this.BytesTimeZone = []byte(faker.Address().TimeZone())
	this.BytesCityPrefix = []byte(faker.Address().CityPrefix())
	this.BytesCitySuffix = []byte(faker.Address().CitySuffix())
	this.BytesStreetSuffix = []byte(faker.Address().StreetSuffix())
	this.BytesState = []byte(faker.Address().State())
	this.BytesStateAbbr = []byte(faker.Address().StateAbbr())
	this.BytesCountry = []byte(faker.Address().Country())
	this.BytesCountryCode = []byte(faker.Address().CountryCode())
	this.DoubleLatitude = float64(faker.Address().Latitude())
	this.DoubleLongitude = float64(faker.Address().Longitude())
	this.BytesString = []byte(faker.Address().String())
	this.StringLatitude = strconv.FormatFloat(float64(faker.Address().Latitude()), 'f', 5, 32)
	this.StringLongitude = strconv.FormatFloat(float64(faker.Address().Longitude()), 'f', 5, 32)
	this.BytesLatitude = []byte(strconv.FormatFloat(float64(faker.Address().Latitude()), 'f', 5, 32))
	this.BytesLongitude = []byte(strconv.FormatFloat(float64(faker.Address().Longitude()), 'f', 5, 32))
	for i := 0; i < 3; i++ {
		aCurrentRCity := faker.Address().City()
		this.RCity = append(this.RCity, aCurrentRCity)
	}
	for i := 0; i < 3; i++ {
		aCurrentRStreetName := faker.Address().StreetName()
		this.RStreetName = append(this.RStreetName, aCurrentRStreetName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRStreetAddress := faker.Address().StreetAddress()
		this.RStreetAddress = append(this.RStreetAddress, aCurrentRStreetAddress)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSecondaryAddress := faker.Address().SecondaryAddress()
		this.RSecondaryAddress = append(this.RSecondaryAddress, aCurrentRSecondaryAddress)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBuildingNumber := faker.Address().BuildingNumber()
		this.RBuildingNumber = append(this.RBuildingNumber, aCurrentRBuildingNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRPostcode := faker.Address().Postcode()
		this.RPostcode = append(this.RPostcode, aCurrentRPostcode)
	}
	for i := 0; i < 3; i++ {
		aCurrentRPostcodeByState := faker.Address().PostcodeByState("IN")
		this.RPostcodeByState = append(this.RPostcodeByState, aCurrentRPostcodeByState)
	}
	for i := 0; i < 3; i++ {
		aCurrentRZipCode := faker.Address().ZipCode()
		this.RZipCode = append(this.RZipCode, aCurrentRZipCode)
	}
	for i := 0; i < 3; i++ {
		aCurrentRZipCodeByState := faker.Address().ZipCodeByState("IN")
		this.RZipCodeByState = append(this.RZipCodeByState, aCurrentRZipCodeByState)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTimeZone := faker.Address().TimeZone()
		this.RTimeZone = append(this.RTimeZone, aCurrentRTimeZone)
	}
	for i := 0; i < 3; i++ {
		aCurrentRCityPrefix := faker.Address().CityPrefix()
		this.RCityPrefix = append(this.RCityPrefix, aCurrentRCityPrefix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRCitySuffix := faker.Address().CitySuffix()
		this.RCitySuffix = append(this.RCitySuffix, aCurrentRCitySuffix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRStreetSuffix := faker.Address().StreetSuffix()
		this.RStreetSuffix = append(this.RStreetSuffix, aCurrentRStreetSuffix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRState := faker.Address().State()
		this.RState = append(this.RState, aCurrentRState)
	}
	for i := 0; i < 3; i++ {
		aCurrentRStateAbbr := faker.Address().StateAbbr()
		this.RStateAbbr = append(this.RStateAbbr, aCurrentRStateAbbr)
	}
	for i := 0; i < 3; i++ {
		aCurrentRCountry := faker.Address().Country()
		this.RCountry = append(this.RCountry, aCurrentRCountry)
	}
	for i := 0; i < 3; i++ {
		aCurrentRCountryCode := faker.Address().CountryCode()
		this.RCountryCode = append(this.RCountryCode, aCurrentRCountryCode)
	}
	for i := 0; i < 3; i++ {
		aCurrentRLatitude := faker.Address().Latitude()
		this.RLatitude = append(this.RLatitude, aCurrentRLatitude)
	}
	for i := 0; i < 3; i++ {
		aCurrentRLongitude := faker.Address().Longitude()
		this.RLongitude = append(this.RLongitude, aCurrentRLongitude)
	}
	for i := 0; i < 3; i++ {
		aCurrentRString := faker.Address().String()
		this.RString = append(this.RString, aCurrentRString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCity := []byte(faker.Address().City())
		this.RBytesCity = append(this.RBytesCity, aCurrentRBytesCity)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesStreetName := []byte(faker.Address().StreetName())
		this.RBytesStreetName = append(this.RBytesStreetName, aCurrentRBytesStreetName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesStreetAddress := []byte(faker.Address().StreetAddress())
		this.RBytesStreetAddress = append(this.RBytesStreetAddress, aCurrentRBytesStreetAddress)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSecondaryAddress := []byte(faker.Address().SecondaryAddress())
		this.RBytesSecondaryAddress = append(this.RBytesSecondaryAddress, aCurrentRBytesSecondaryAddress)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesBuildingNumber := []byte(faker.Address().BuildingNumber())
		this.RBytesBuildingNumber = append(this.RBytesBuildingNumber, aCurrentRBytesBuildingNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesPostcode := []byte(faker.Address().Postcode())
		this.RBytesPostcode = append(this.RBytesPostcode, aCurrentRBytesPostcode)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesPostcodeByState := []byte(faker.Address().PostcodeByState("IN"))
		this.RBytesPostcodeByState = append(this.RBytesPostcodeByState, aCurrentRBytesPostcodeByState)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesZipCode := []byte(faker.Address().ZipCode())
		this.RBytesZipCode = append(this.RBytesZipCode, aCurrentRBytesZipCode)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesZipCodeByState := []byte(faker.Address().ZipCodeByState("IN"))
		this.RBytesZipCodeByState = append(this.RBytesZipCodeByState, aCurrentRBytesZipCodeByState)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesTimeZone := []byte(faker.Address().TimeZone())
		this.RBytesTimeZone = append(this.RBytesTimeZone, aCurrentRBytesTimeZone)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCityPrefix := []byte(faker.Address().CityPrefix())
		this.RBytesCityPrefix = append(this.RBytesCityPrefix, aCurrentRBytesCityPrefix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCitySuffix := []byte(faker.Address().CitySuffix())
		this.RBytesCitySuffix = append(this.RBytesCitySuffix, aCurrentRBytesCitySuffix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesStreetSuffix := []byte(faker.Address().StreetSuffix())
		this.RBytesStreetSuffix = append(this.RBytesStreetSuffix, aCurrentRBytesStreetSuffix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesState := []byte(faker.Address().State())
		this.RBytesState = append(this.RBytesState, aCurrentRBytesState)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesStateAbbr := []byte(faker.Address().StateAbbr())
		this.RBytesStateAbbr = append(this.RBytesStateAbbr, aCurrentRBytesStateAbbr)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCountry := []byte(faker.Address().Country())
		this.RBytesCountry = append(this.RBytesCountry, aCurrentRBytesCountry)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCountryCode := []byte(faker.Address().CountryCode())
		this.RBytesCountryCode = append(this.RBytesCountryCode, aCurrentRBytesCountryCode)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDoubleLatitude := float64(faker.Address().Latitude())
		this.RDoubleLatitude = append(this.RDoubleLatitude, aCurrentRDoubleLatitude)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDoubleLongitude := float64(faker.Address().Longitude())
		this.RDoubleLongitude = append(this.RDoubleLongitude, aCurrentRDoubleLongitude)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesString := []byte(faker.Address().String())
		this.RBytesString = append(this.RBytesString, aCurrentRBytesString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRStringLatitude := strconv.FormatFloat(float64(faker.Address().Latitude()), 'f', 5, 32)
		this.RStringLatitude = append(this.RStringLatitude, aCurrentRStringLatitude)
	}
	for i := 0; i < 3; i++ {
		aCurrentRStringLongitude := strconv.FormatFloat(float64(faker.Address().Longitude()), 'f', 5, 32)
		this.RStringLongitude = append(this.RStringLongitude, aCurrentRStringLongitude)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesLatitude := []byte(strconv.FormatFloat(float64(faker.Address().Latitude()), 'f', 5, 32))
		this.RBytesLatitude = append(this.RBytesLatitude, aCurrentRBytesLatitude)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesLongitude := []byte(strconv.FormatFloat(float64(faker.Address().Longitude()), 'f', 5, 32))
		this.RBytesLongitude = append(this.RBytesLongitude, aCurrentRBytesLongitude)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2City := faker.Address().City()
		this.R2City = append(this.R2City, aCurrentR2City)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2StreetName := faker.Address().StreetName()
		this.R2StreetName = append(this.R2StreetName, aCurrentR2StreetName)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2StreetAddress := faker.Address().StreetAddress()
		this.R2StreetAddress = append(this.R2StreetAddress, aCurrentR2StreetAddress)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2SecondaryAddress := faker.Address().SecondaryAddress()
		this.R2SecondaryAddress = append(this.R2SecondaryAddress, aCurrentR2SecondaryAddress)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2BuildingNumber := faker.Address().BuildingNumber()
		this.R2BuildingNumber = append(this.R2BuildingNumber, aCurrentR2BuildingNumber)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Postcode := faker.Address().Postcode()
		this.R2Postcode = append(this.R2Postcode, aCurrentR2Postcode)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2PostcodeByState := faker.Address().PostcodeByState("IN")
		this.R2PostcodeByState = append(this.R2PostcodeByState, aCurrentR2PostcodeByState)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2ZipCode := faker.Address().ZipCode()
		this.R2ZipCode = append(this.R2ZipCode, aCurrentR2ZipCode)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2ZipCodeByState := faker.Address().ZipCodeByState("IN")
		this.R2ZipCodeByState = append(this.R2ZipCodeByState, aCurrentR2ZipCodeByState)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2TimeZone := faker.Address().TimeZone()
		this.R2TimeZone = append(this.R2TimeZone, aCurrentR2TimeZone)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2CityPrefix := faker.Address().CityPrefix()
		this.R2CityPrefix = append(this.R2CityPrefix, aCurrentR2CityPrefix)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2CitySuffix := faker.Address().CitySuffix()
		this.R2CitySuffix = append(this.R2CitySuffix, aCurrentR2CitySuffix)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2StreetSuffix := faker.Address().StreetSuffix()
		this.R2StreetSuffix = append(this.R2StreetSuffix, aCurrentR2StreetSuffix)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2State := faker.Address().State()
		this.R2State = append(this.R2State, aCurrentR2State)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2StateAbbr := faker.Address().StateAbbr()
		this.R2StateAbbr = append(this.R2StateAbbr, aCurrentR2StateAbbr)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Country := faker.Address().Country()
		this.R2Country = append(this.R2Country, aCurrentR2Country)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2CountryCode := faker.Address().CountryCode()
		this.R2CountryCode = append(this.R2CountryCode, aCurrentR2CountryCode)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Latitude := strconv.FormatFloat(float64(faker.Address().Latitude()), 'f', 5, 32)
		this.R2Latitude = append(this.R2Latitude, aCurrentR2Latitude)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Longitude := strconv.FormatFloat(float64(faker.Address().Longitude()), 'f', 5, 32)
		this.R2Longitude = append(this.R2Longitude, aCurrentR2Longitude)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2String := faker.Address().String()
		this.R2String = append(this.R2String, aCurrentR2String)
	}
	return this
}

func NewAppMessageGomeetFaker() *AppMessage {
	this := &AppMessage{}
	this.Name = faker.App().Name()
	this.Version = faker.App().Version()
	this.Author = faker.App().Author()
	this.String_ = faker.App().String()
	this.BytesName = []byte(faker.App().Name())
	this.BytesVersion = []byte(faker.App().Version())
	this.BytesAuthor = []byte(faker.App().Author())
	this.BytesString = []byte(faker.App().String())
	for i := 0; i < 3; i++ {
		aCurrentRName := faker.App().Name()
		this.RName = append(this.RName, aCurrentRName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRVersion := faker.App().Version()
		this.RVersion = append(this.RVersion, aCurrentRVersion)
	}
	for i := 0; i < 3; i++ {
		aCurrentRAuthor := faker.App().Author()
		this.RAuthor = append(this.RAuthor, aCurrentRAuthor)
	}
	for i := 0; i < 3; i++ {
		aCurrentRString := faker.App().String()
		this.RString = append(this.RString, aCurrentRString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesName := []byte(faker.App().Name())
		this.RBytesName = append(this.RBytesName, aCurrentRBytesName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesVersion := []byte(faker.App().Version())
		this.RBytesVersion = append(this.RBytesVersion, aCurrentRBytesVersion)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesAuthor := []byte(faker.App().Author())
		this.RBytesAuthor = append(this.RBytesAuthor, aCurrentRBytesAuthor)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesString := []byte(faker.App().String())
		this.RBytesString = append(this.RBytesString, aCurrentRBytesString)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Name := faker.App().Name()
		this.R2Name = append(this.R2Name, aCurrentR2Name)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Version := faker.App().Version()
		this.R2Version = append(this.R2Version, aCurrentR2Version)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Author := faker.App().Author()
		this.R2Author = append(this.R2Author, aCurrentR2Author)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2String := faker.App().String()
		this.R2String = append(this.R2String, aCurrentR2String)
	}
	return this
}

func NewAvatarMessageGomeetFaker() *AvatarMessage {
	this := &AvatarMessage{}
	this.String_ = faker.Avatar().String()
	this.Url = faker.Avatar().Url("jpg", 300, 300)
	this.BytesString = []byte(faker.Avatar().String())
	this.BytesUrl = []byte(faker.Avatar().Url("jpg", 300, 300))
	this.PngUrl = faker.Avatar().Url("png", 300, 300)
	for i := 0; i < 3; i++ {
		aCurrentRString := faker.Avatar().String()
		this.RString = append(this.RString, aCurrentRString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUrl := faker.Avatar().Url("jpg", 300, 300)
		this.RUrl = append(this.RUrl, aCurrentRUrl)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesString := []byte(faker.Avatar().String())
		this.RBytesString = append(this.RBytesString, aCurrentRBytesString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesUrl := []byte(faker.Avatar().Url("jpg", 300, 300))
		this.RBytesUrl = append(this.RBytesUrl, aCurrentRBytesUrl)
	}
	for i := 0; i < 3; i++ {
		aCurrentRPngUrl := faker.Avatar().Url("png", 300, 300)
		this.RPngUrl = append(this.RPngUrl, aCurrentRPngUrl)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2String := faker.Avatar().String()
		this.R2String = append(this.R2String, aCurrentR2String)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Url := faker.Avatar().Url("jpg", 300, 300)
		this.R2Url = append(this.R2Url, aCurrentR2Url)
	}
	return this
}

func NewBitcoinMessageGomeetFaker() *BitcoinMessage {
	this := &BitcoinMessage{}
	this.Address = faker.Bitcoin().Address()
	this.String_ = faker.Bitcoin().String()
	this.BytesAddress = []byte(faker.Bitcoin().Address())
	this.BytesString = []byte(faker.Bitcoin().String())
	for i := 0; i < 3; i++ {
		aCurrentRAddress := faker.Bitcoin().Address()
		this.RAddress = append(this.RAddress, aCurrentRAddress)
	}
	for i := 0; i < 3; i++ {
		aCurrentRString := faker.Bitcoin().String()
		this.RString = append(this.RString, aCurrentRString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesAddress := []byte(faker.Bitcoin().Address())
		this.RBytesAddress = append(this.RBytesAddress, aCurrentRBytesAddress)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesString := []byte(faker.Bitcoin().String())
		this.RBytesString = append(this.RBytesString, aCurrentRBytesString)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Address := faker.Bitcoin().Address()
		this.R2Address = append(this.R2Address, aCurrentR2Address)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2String := faker.Bitcoin().String()
		this.R2String = append(this.R2String, aCurrentR2String)
	}
	return this
}

func NewBusinessMessageGomeetFaker() *BusinessMessage {
	this := &BusinessMessage{}
	this.CreditCardNumber = faker.Business().CreditCardNumber()
	this.CreditCardExpiryDate = faker.Business().CreditCardExpiryDate()
	this.CreditCardType = faker.Business().CreditCardType()
	this.BytesCreditCardNumber = []byte(faker.Business().CreditCardNumber())
	this.BytesCreditCardExpiryDate = []byte(faker.Business().CreditCardExpiryDate())
	this.BytesCreditCardType = []byte(faker.Business().CreditCardType())
	for i := 0; i < 3; i++ {
		aCurrentRCreditCardNumber := faker.Business().CreditCardNumber()
		this.RCreditCardNumber = append(this.RCreditCardNumber, aCurrentRCreditCardNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRCreditCardExpiryDate := faker.Business().CreditCardExpiryDate()
		this.RCreditCardExpiryDate = append(this.RCreditCardExpiryDate, aCurrentRCreditCardExpiryDate)
	}
	for i := 0; i < 3; i++ {
		aCurrentRCreditCardType := faker.Business().CreditCardType()
		this.RCreditCardType = append(this.RCreditCardType, aCurrentRCreditCardType)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCreditCardNumber := []byte(faker.Business().CreditCardNumber())
		this.RBytesCreditCardNumber = append(this.RBytesCreditCardNumber, aCurrentRBytesCreditCardNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCreditCardExpiryDate := []byte(faker.Business().CreditCardExpiryDate())
		this.RBytesCreditCardExpiryDate = append(this.RBytesCreditCardExpiryDate, aCurrentRBytesCreditCardExpiryDate)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCreditCardType := []byte(faker.Business().CreditCardType())
		this.RBytesCreditCardType = append(this.RBytesCreditCardType, aCurrentRBytesCreditCardType)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2CreditCardNumber := faker.Business().CreditCardNumber()
		this.R2CreditCardNumber = append(this.R2CreditCardNumber, aCurrentR2CreditCardNumber)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2CreditCardExpiryDate := faker.Business().CreditCardExpiryDate()
		this.R2CreditCardExpiryDate = append(this.R2CreditCardExpiryDate, aCurrentR2CreditCardExpiryDate)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2CreditCardType := faker.Business().CreditCardType()
		this.R2CreditCardType = append(this.R2CreditCardType, aCurrentR2CreditCardType)
	}
	return this
}

func NewCodeMessageGomeetFaker() *CodeMessage {
	this := &CodeMessage{}
	this.Isbn10 = faker.Code().Isbn10()
	this.Isbn13 = faker.Code().Isbn13()
	this.Ean13 = faker.Code().Ean13()
	this.Ean8 = faker.Code().Ean8()
	this.Rut = faker.Code().Rut()
	this.Abn = faker.Code().Abn()
	this.BytesIsbn10 = []byte(faker.Code().Isbn10())
	this.BytesIsbn13 = []byte(faker.Code().Isbn13())
	this.BytesEan13 = []byte(faker.Code().Ean13())
	this.BytesEan8 = []byte(faker.Code().Ean8())
	this.BytesRut = []byte(faker.Code().Rut())
	this.BytesAbn = []byte(faker.Code().Abn())
	for i := 0; i < 3; i++ {
		aCurrentRIsbn10 := faker.Code().Isbn10()
		this.RIsbn10 = append(this.RIsbn10, aCurrentRIsbn10)
	}
	for i := 0; i < 3; i++ {
		aCurrentRIsbn13 := faker.Code().Isbn13()
		this.RIsbn13 = append(this.RIsbn13, aCurrentRIsbn13)
	}
	for i := 0; i < 3; i++ {
		aCurrentREan13 := faker.Code().Ean13()
		this.REan13 = append(this.REan13, aCurrentREan13)
	}
	for i := 0; i < 3; i++ {
		aCurrentREan8 := faker.Code().Ean8()
		this.REan8 = append(this.REan8, aCurrentREan8)
	}
	for i := 0; i < 3; i++ {
		aCurrentRRut := faker.Code().Rut()
		this.RRut = append(this.RRut, aCurrentRRut)
	}
	for i := 0; i < 3; i++ {
		aCurrentRAbn := faker.Code().Abn()
		this.RAbn = append(this.RAbn, aCurrentRAbn)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesIsbn10 := []byte(faker.Code().Isbn10())
		this.RBytesIsbn10 = append(this.RBytesIsbn10, aCurrentRBytesIsbn10)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesIsbn13 := []byte(faker.Code().Isbn13())
		this.RBytesIsbn13 = append(this.RBytesIsbn13, aCurrentRBytesIsbn13)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesEan13 := []byte(faker.Code().Ean13())
		this.RBytesEan13 = append(this.RBytesEan13, aCurrentRBytesEan13)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesEan8 := []byte(faker.Code().Ean8())
		this.RBytesEan8 = append(this.RBytesEan8, aCurrentRBytesEan8)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesRut := []byte(faker.Code().Rut())
		this.RBytesRut = append(this.RBytesRut, aCurrentRBytesRut)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesAbn := []byte(faker.Code().Abn())
		this.RBytesAbn = append(this.RBytesAbn, aCurrentRBytesAbn)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Isbn10 := faker.Code().Isbn10()
		this.R2Isbn10 = append(this.R2Isbn10, aCurrentR2Isbn10)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Isbn13 := faker.Code().Isbn13()
		this.R2Isbn13 = append(this.R2Isbn13, aCurrentR2Isbn13)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Ean13 := faker.Code().Ean13()
		this.R2Ean13 = append(this.R2Ean13, aCurrentR2Ean13)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Ean8 := faker.Code().Ean8()
		this.R2Ean8 = append(this.R2Ean8, aCurrentR2Ean8)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Rut := faker.Code().Rut()
		this.R2Rut = append(this.R2Rut, aCurrentR2Rut)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Abn := faker.Code().Abn()
		this.R2Abn = append(this.R2Abn, aCurrentR2Abn)
	}
	return this
}

func NewCommerceMessageGomeetFaker() *CommerceMessage {
	this := &CommerceMessage{}
	this.Color = faker.Commerce().Color()
	this.Department = faker.Commerce().Department()
	this.ProductName = faker.Commerce().ProductName()
	this.Price = faker.Commerce().Price()
	this.BytesColor = []byte(faker.Commerce().Color())
	this.BytesDepartment = []byte(faker.Commerce().Department())
	this.BytesProductName = []byte(faker.Commerce().ProductName())
	this.DoublePrice = float64(faker.Commerce().Price())
	this.StringPrice = strconv.FormatFloat(float64(faker.Commerce().Price()), 'f', 2, 32)
	this.BytesPrice = []byte(strconv.FormatFloat(float64(faker.Commerce().Price()), 'f', 2, 32))
	for i := 0; i < 3; i++ {
		aCurrentRColor := faker.Commerce().Color()
		this.RColor = append(this.RColor, aCurrentRColor)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDepartment := faker.Commerce().Department()
		this.RDepartment = append(this.RDepartment, aCurrentRDepartment)
	}
	for i := 0; i < 3; i++ {
		aCurrentRProductName := faker.Commerce().ProductName()
		this.RProductName = append(this.RProductName, aCurrentRProductName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRPrice := faker.Commerce().Price()
		this.RPrice = append(this.RPrice, aCurrentRPrice)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesColor := []byte(faker.Commerce().Color())
		this.RBytesColor = append(this.RBytesColor, aCurrentRBytesColor)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesDepartment := []byte(faker.Commerce().Department())
		this.RBytesDepartment = append(this.RBytesDepartment, aCurrentRBytesDepartment)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesProductName := []byte(faker.Commerce().ProductName())
		this.RBytesProductName = append(this.RBytesProductName, aCurrentRBytesProductName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDoublePrice := float64(faker.Commerce().Price())
		this.RDoublePrice = append(this.RDoublePrice, aCurrentRDoublePrice)
	}
	for i := 0; i < 3; i++ {
		aCurrentRStringPrice := strconv.FormatFloat(float64(faker.Commerce().Price()), 'f', 2, 32)
		this.RStringPrice = append(this.RStringPrice, aCurrentRStringPrice)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesPrice := []byte(strconv.FormatFloat(float64(faker.Commerce().Price()), 'f', 2, 32))
		this.RBytesPrice = append(this.RBytesPrice, aCurrentRBytesPrice)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Color := faker.Commerce().Color()
		this.R2Color = append(this.R2Color, aCurrentR2Color)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Department := faker.Commerce().Department()
		this.R2Department = append(this.R2Department, aCurrentR2Department)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2ProductName := faker.Commerce().ProductName()
		this.R2ProductName = append(this.R2ProductName, aCurrentR2ProductName)
	}
	return this
}

func NewCompanyMessageGomeetFaker() *CompanyMessage {
	this := &CompanyMessage{}
	this.Name = faker.Company().Name()
	this.Suffix = faker.Company().Suffix()
	this.CatchPhrase = faker.Company().CatchPhrase()
	this.Bs = faker.Company().Bs()
	this.Ein = faker.Company().Ein()
	this.DunsNumber = faker.Company().DunsNumber()
	this.Logo = faker.Company().Logo()
	this.String_ = faker.Company().String()
	this.BytesName = []byte(faker.Company().Name())
	this.BytesSuffix = []byte(faker.Company().Suffix())
	this.BytesCatchPhrase = []byte(faker.Company().CatchPhrase())
	this.BytesBs = []byte(faker.Company().Bs())
	this.BytesEin = []byte(faker.Company().Ein())
	this.BytesDunsNumber = []byte(faker.Company().DunsNumber())
	this.BytesLogo = []byte(faker.Company().Logo())
	this.BytesString = []byte(faker.Company().String())
	for i := 0; i < 3; i++ {
		aCurrentRName := faker.Company().Name()
		this.RName = append(this.RName, aCurrentRName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSuffix := faker.Company().Suffix()
		this.RSuffix = append(this.RSuffix, aCurrentRSuffix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRCatchPhrase := faker.Company().CatchPhrase()
		this.RCatchPhrase = append(this.RCatchPhrase, aCurrentRCatchPhrase)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBs := faker.Company().Bs()
		this.RBs = append(this.RBs, aCurrentRBs)
	}
	for i := 0; i < 3; i++ {
		aCurrentREin := faker.Company().Ein()
		this.REin = append(this.REin, aCurrentREin)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDunsNumber := faker.Company().DunsNumber()
		this.RDunsNumber = append(this.RDunsNumber, aCurrentRDunsNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRLogo := faker.Company().Logo()
		this.RLogo = append(this.RLogo, aCurrentRLogo)
	}
	for i := 0; i < 3; i++ {
		aCurrentRString := faker.Company().String()
		this.RString = append(this.RString, aCurrentRString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesName := []byte(faker.Company().Name())
		this.RBytesName = append(this.RBytesName, aCurrentRBytesName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSuffix := []byte(faker.Company().Suffix())
		this.RBytesSuffix = append(this.RBytesSuffix, aCurrentRBytesSuffix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCatchPhrase := []byte(faker.Company().CatchPhrase())
		this.RBytesCatchPhrase = append(this.RBytesCatchPhrase, aCurrentRBytesCatchPhrase)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesBs := []byte(faker.Company().Bs())
		this.RBytesBs = append(this.RBytesBs, aCurrentRBytesBs)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesEin := []byte(faker.Company().Ein())
		this.RBytesEin = append(this.RBytesEin, aCurrentRBytesEin)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesDunsNumber := []byte(faker.Company().DunsNumber())
		this.RBytesDunsNumber = append(this.RBytesDunsNumber, aCurrentRBytesDunsNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesLogo := []byte(faker.Company().Logo())
		this.RBytesLogo = append(this.RBytesLogo, aCurrentRBytesLogo)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesString := []byte(faker.Company().String())
		this.RBytesString = append(this.RBytesString, aCurrentRBytesString)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Name := faker.Company().Name()
		this.R2Name = append(this.R2Name, aCurrentR2Name)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Suffix := faker.Company().Suffix()
		this.R2Suffix = append(this.R2Suffix, aCurrentR2Suffix)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2CatchPhrase := faker.Company().CatchPhrase()
		this.R2CatchPhrase = append(this.R2CatchPhrase, aCurrentR2CatchPhrase)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Bs := faker.Company().Bs()
		this.R2Bs = append(this.R2Bs, aCurrentR2Bs)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Ein := faker.Company().Ein()
		this.R2Ein = append(this.R2Ein, aCurrentR2Ein)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2DunsNumber := faker.Company().DunsNumber()
		this.R2DunsNumber = append(this.R2DunsNumber, aCurrentR2DunsNumber)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Logo := faker.Company().Logo()
		this.R2Logo = append(this.R2Logo, aCurrentR2Logo)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2String := faker.Company().String()
		this.R2String = append(this.R2String, aCurrentR2String)
	}
	return this
}

func NewDateMessageGomeetFaker() *DateMessage {
	this := &DateMessage{}
	if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
		if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Date().Between(t1, t2)); err == nil {
				this.Between = t
			}
		}
	}
	if aForwardDuration, err := time.ParseDuration("240h"); err == nil {
		if t, err := ptypes.TimestampProto(faker.Date().Forward(aForwardDuration)); err == nil {
			this.Forward = t
		}
	}
	if aBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		if t, err := ptypes.TimestampProto(faker.Date().Backward(aBackwardDuration)); err == nil {
			this.Backward = t
		}
	}
	if t, err := ptypes.TimestampProto(faker.Date().Birthday(17, 99)); err == nil {
		this.Birthday = t
	}
	if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
		if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
			aStringBetweenDate := faker.Date().Between(t1, t2)
			this.StringBetween = aStringBetweenDate.Format("2006-01-02 15:04:05")
		}
	}
	if aStringForwardDuration, err := time.ParseDuration("240h"); err == nil {
		aStringForwardDate := faker.Date().Forward(aStringForwardDuration)
		this.StringForward = aStringForwardDate.Format("2006-01-02 15:04:05")
	}
	if aStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aStringBackwardDate := faker.Date().Backward(aStringBackwardDuration)
		this.StringBackward = aStringBackwardDate.Format("2006-01-02 15:04:05")
	}
	aStringBirthdayDate := faker.Date().Birthday(17, 99)
	this.StringBirthday = aStringBirthdayDate.Format("2006-01-02")
	if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
		if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
			aBytesBetweenDate := faker.Date().Between(t1, t2)
			this.BytesBetween = []byte(aBytesBetweenDate.Format("2006-01-02 15:04:05"))
		}
	}
	if aBytesForwardDuration, err := time.ParseDuration("240h"); err == nil {
		aBytesForwardDate := faker.Date().Forward(aBytesForwardDuration)
		this.BytesForward = []byte(aBytesForwardDate.Format("2006-01-02 15:04:05"))
	}
	if aBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aBytesBackwardDate := faker.Date().Backward(aBytesBackwardDuration)
		this.BytesBackward = []byte(aBytesBackwardDate.Format("2006-01-02 15:04:05"))
	}
	aBytesBirthdayDate := faker.Date().Birthday(17, 99)
	this.BytesBirthday = []byte(aBytesBirthdayDate.Format("2006-01-02"))
	if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
		if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
			aFStringBetweenDate := faker.Date().Between(t1, t2)
			this.FStringBetween = aFStringBetweenDate.Format("2006-01-02 15:04:05")
		}
	}
	if aFStringForwardDuration, err := time.ParseDuration("240h"); err == nil {
		aFStringForwardDate := faker.Date().Forward(aFStringForwardDuration)
		this.FStringForward = aFStringForwardDate.Format("2006-01-02")
	}
	if aFStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aFStringBackwardDate := faker.Date().Backward(aFStringBackwardDuration)
		this.FStringBackward = aFStringBackwardDate.Format("2006-01-02")
	}
	aFStringBirthdayDate := faker.Date().Birthday(17, 99)
	this.FStringBirthday = aFStringBirthdayDate.Format("2006-01-02")
	if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
		if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
			aFBytesBetweenDate := faker.Date().Between(t1, t2)
			this.FBytesBetween = []byte(aFBytesBetweenDate.Format("2006-01-02 15:04:05"))
		}
	}
	if aFBytesForwardDuration, err := time.ParseDuration("240h"); err == nil {
		aFBytesForwardDate := faker.Date().Forward(aFBytesForwardDuration)
		this.FBytesForward = []byte(aFBytesForwardDate.Format("2006-01-02"))
	}
	if aFBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aFBytesBackwardDate := faker.Date().Backward(aFBytesBackwardDuration)
		this.FBytesBackward = []byte(aFBytesBackwardDate.Format("2006-01-02"))
	}
	aFBytesBirthdayDate := faker.Date().Birthday(17, 99)
	this.FBytesBirthday = []byte(aFBytesBirthdayDate.Format("2006-01-02"))
	// EStringForward  =  faker.Date().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	if aEStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aEStringBackwardDate := faker.Date().Backward(aEStringBackwardDuration)
		this.EStringBackward = aEStringBackwardDate.Format("2006-01-02 15:04:05")
	}
	// EBytesForward  =  faker.Date().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	if aEBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aEBytesBackwardDate := faker.Date().Backward(aEBytesBackwardDuration)
		this.EBytesBackward = []byte(aEBytesBackwardDate.Format("2006-01-02 15:04:05"))
	}
	// EFStringForward  =  faker.Date().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	if aEFStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aEFStringBackwardDate := faker.Date().Backward(aEFStringBackwardDuration)
		this.EFStringBackward = aEFStringBackwardDate.Format("2006-01-02")
	}
	// EFBytesForward  =  faker.Date().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	if aEFBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aEFBytesBackwardDate := faker.Date().Backward(aEFBytesBackwardDuration)
		this.EFBytesBackward = []byte(aEFBytesBackwardDate.Format("2006-01-02"))
	}
	for i := 0; i < 3; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				if t, err := ptypes.TimestampProto(faker.Date().Between(t1, t2)); err == nil {
					this.RBetween = append(this.RBetween, t)
				}
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRForwardDuration, err := time.ParseDuration("240h"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Date().Forward(aRForwardDuration)); err == nil {
				this.RForward = append(this.RForward, t)
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Date().Backward(aRBackwardDuration)); err == nil {
				this.RBackward = append(this.RBackward, t)
			}
		}
	}
	for i := 0; i < 3; i++ {
		if t, err := ptypes.TimestampProto(faker.Date().Birthday(17, 99)); err == nil {
			this.RBirthday = append(this.RBirthday, t)
		}
	}
	for i := 0; i < 3; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				aRStringBetweenDate := faker.Date().Between(t1, t2)
				this.RStringBetween = append(this.RStringBetween, aRStringBetweenDate.Format("2006-01-02 15:04:05"))
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRStringForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRStringForwardDate := faker.Date().Forward(aRStringForwardDuration)
			this.RStringForward = append(this.RStringForward, aRStringForwardDate.Format("2006-01-02 15:04:05"))
		}
	}
	for i := 0; i < 3; i++ {
		if aRStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRStringBackwardDate := faker.Date().Backward(aRStringBackwardDuration)
			this.RStringBackward = append(this.RStringBackward, aRStringBackwardDate.Format("2006-01-02 15:04:05"))
		}
	}
	for i := 0; i < 3; i++ {
		aRStringBirthdayDate := faker.Date().Birthday(17, 99)
		this.RStringBirthday = append(this.RStringBirthday, aRStringBirthdayDate.Format("2006-01-02"))
	}
	for i := 0; i < 3; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				aRBytesBetweenDate := faker.Date().Between(t1, t2)
				this.RBytesBetween = append(this.RBytesBetween, []byte(aRBytesBetweenDate.Format("2006-01-02 15:04:05")))
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRBytesForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRBytesForwardDate := faker.Date().Forward(aRBytesForwardDuration)
			this.RBytesForward = append(this.RBytesForward, []byte(aRBytesForwardDate.Format("2006-01-02 15:04:05")))
		}
	}
	for i := 0; i < 3; i++ {
		if aRBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRBytesBackwardDate := faker.Date().Backward(aRBytesBackwardDuration)
			this.RBytesBackward = append(this.RBytesBackward, []byte(aRBytesBackwardDate.Format("2006-01-02 15:04:05")))
		}
	}
	for i := 0; i < 3; i++ {
		aRBytesBirthdayDate := faker.Date().Birthday(17, 99)
		this.RBytesBirthday = append(this.RBytesBirthday, []byte(aRBytesBirthdayDate.Format("2006-01-02")))
	}
	for i := 0; i < 3; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				aRFStringBetweenDate := faker.Date().Between(t1, t2)
				this.RFStringBetween = append(this.RFStringBetween, aRFStringBetweenDate.Format("2006-01-02 15:04:05"))
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRFStringForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRFStringForwardDate := faker.Date().Forward(aRFStringForwardDuration)
			this.RFStringForward = append(this.RFStringForward, aRFStringForwardDate.Format("2006-01-02"))
		}
	}
	for i := 0; i < 3; i++ {
		if aRFStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRFStringBackwardDate := faker.Date().Backward(aRFStringBackwardDuration)
			this.RFStringBackward = append(this.RFStringBackward, aRFStringBackwardDate.Format("2006-01-02"))
		}
	}
	for i := 0; i < 3; i++ {
		aRFStringBirthdayDate := faker.Date().Birthday(17, 99)
		this.RFStringBirthday = append(this.RFStringBirthday, aRFStringBirthdayDate.Format("2006-01-02"))
	}
	for i := 0; i < 3; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				aRFBytesBetweenDate := faker.Date().Between(t1, t2)
				this.RFBytesBetween = append(this.RFBytesBetween, []byte(aRFBytesBetweenDate.Format("2006-01-02 15:04:05")))
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRFBytesForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRFBytesForwardDate := faker.Date().Forward(aRFBytesForwardDuration)
			this.RFBytesForward = append(this.RFBytesForward, []byte(aRFBytesForwardDate.Format("2006-01-02")))
		}
	}
	for i := 0; i < 3; i++ {
		if aRFBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRFBytesBackwardDate := faker.Date().Backward(aRFBytesBackwardDuration)
			this.RFBytesBackward = append(this.RFBytesBackward, []byte(aRFBytesBackwardDate.Format("2006-01-02")))
		}
	}
	for i := 0; i < 3; i++ {
		aRFBytesBirthdayDate := faker.Date().Birthday(17, 99)
		this.RFBytesBirthday = append(this.RFBytesBirthday, []byte(aRFBytesBirthdayDate.Format("2006-01-02")))
	}
	for i := 0; i < 3; i++ {
		// REStringForward  :=  faker.Date().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		// REStringBackward  :=  faker.Date().Backward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		// REBytesForward  :=  faker.Date().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		// REBytesBackward  :=  faker.Date().Backward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		// REFStringForward  :=  faker.Date().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		// REFStringBackward  :=  faker.Date().Backward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		// REFBytesForward  :=  faker.Date().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		// REFBytesBackward  :=  faker.Date().Backward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 5; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				if t, err := ptypes.TimestampProto(faker.Date().Between(t1, t2)); err == nil {
					this.R2Between = append(this.R2Between, t)
				}
			}
		}
	}
	for i := 0; i < 5; i++ {
		if aR2ForwardDuration, err := time.ParseDuration("240h"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Date().Forward(aR2ForwardDuration)); err == nil {
				this.R2Forward = append(this.R2Forward, t)
			}
		}
	}
	for i := 0; i < 5; i++ {
		if aR2BackwardDuration, err := time.ParseDuration("240h"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Date().Backward(aR2BackwardDuration)); err == nil {
				this.R2Backward = append(this.R2Backward, t)
			}
		}
	}
	for i := 0; i < 5; i++ {
		if t, err := ptypes.TimestampProto(faker.Date().Birthday(17, 99)); err == nil {
			this.R2Birthday = append(this.R2Birthday, t)
		}
	}
	for i := 0; i < 5; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				aR2StringBetweenDate := faker.Date().Between(t1, t2)
				this.R2StringBetween = append(this.R2StringBetween, aR2StringBetweenDate.Format("2006-01-02 15:04:05"))
			}
		}
	}
	for i := 0; i < 5; i++ {
		if aR2StringForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aR2StringForwardDate := faker.Date().Forward(aR2StringForwardDuration)
			this.R2StringForward = append(this.R2StringForward, aR2StringForwardDate.Format("2006-01-02 15:04:05"))
		}
	}
	for i := 0; i < 5; i++ {
		if aR2StringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aR2StringBackwardDate := faker.Date().Backward(aR2StringBackwardDuration)
			this.R2StringBackward = append(this.R2StringBackward, aR2StringBackwardDate.Format("2006-01-02 15:04:05"))
		}
	}
	for i := 0; i < 5; i++ {
		aR2StringBirthdayDate := faker.Date().Birthday(17, 99)
		this.R2StringBirthday = append(this.R2StringBirthday, aR2StringBirthdayDate.Format("2006-01-02"))
	}
	for i := 0; i < 5; i++ {
		// R2FBetween  :=  faker.Date().Between(...) // bad type conversion parsing time "1976-12-13 00:00:00": extra text:  00:00:00
	}
	for i := 0; i < 5; i++ {
		if aR2FForwardDuration, err := time.ParseDuration("240h"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Date().Forward(aR2FForwardDuration)); err == nil {
				this.R2FForward = append(this.R2FForward, t)
			}
		}
	}
	for i := 0; i < 5; i++ {
		if aR2FBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Date().Backward(aR2FBackwardDuration)); err == nil {
				this.R2FBackward = append(this.R2FBackward, t)
			}
		}
	}
	for i := 0; i < 5; i++ {
		if t, err := ptypes.TimestampProto(faker.Date().Birthday(17, 99)); err == nil {
			this.R2FBirthday = append(this.R2FBirthday, t)
		}
	}
	for i := 0; i < 5; i++ {
		// R2FStringBetween  :=  faker.Date().Between(...) // bad type conversion parsing time "1976-12-13 00:00:00": extra text:  00:00:00
	}
	for i := 0; i < 5; i++ {
		if aR2FStringForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aR2FStringForwardDate := faker.Date().Forward(aR2FStringForwardDuration)
			this.R2FStringForward = append(this.R2FStringForward, aR2FStringForwardDate.Format("2006-01-02"))
		}
	}
	for i := 0; i < 5; i++ {
		if aR2FStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aR2FStringBackwardDate := faker.Date().Backward(aR2FStringBackwardDuration)
			this.R2FStringBackward = append(this.R2FStringBackward, aR2FStringBackwardDate.Format("2006-01-02"))
		}
	}
	for i := 0; i < 5; i++ {
		aR2FStringBirthdayDate := faker.Date().Birthday(17, 99)
		this.R2FStringBirthday = append(this.R2FStringBirthday, aR2FStringBirthdayDate.Format("2006-01-02"))
	}
	if t, err := ptypes.TimestampProto(time.Now()); err == nil {
		this.Now = t
	}
	this.StringNow = time.Now().Format("2006-01-02 15:04:05")
	this.BytesNow = []byte(time.Now().Format("2006-01-02 15:04:05"))
	this.FStringNow = time.Now().Format("2006-01-02T15:04:05Z07:00")
	this.FBytesNow = []byte(time.Now().Format("2006-01-02T15:04:05Z07:00"))
	for i := 0; i < 3; i++ {
		if t, err := ptypes.TimestampProto(time.Now()); err == nil {
			this.RNow = append(this.RNow, t)
		}
	}
	for i := 0; i < 3; i++ {
		this.RStringNow = append(this.RStringNow, time.Now().Format("2006-01-02 15:04:05"))
	}
	for i := 0; i < 3; i++ {
		this.RBytesNow = append(this.RBytesNow, []byte(time.Now().Format("2006-01-02 15:04:05")))
	}
	for i := 0; i < 3; i++ {
		this.RFStringNow = append(this.RFStringNow, time.Now().Format("2006-01-02T15:04:05Z07:00"))
	}
	for i := 0; i < 3; i++ {
		this.RFBytesNow = append(this.RFBytesNow, []byte(time.Now().Format("2006-01-02T15:04:05Z07:00")))
	}
	for i := 0; i < 5; i++ {
		if t, err := ptypes.TimestampProto(time.Now()); err == nil {
			this.R2Now = append(this.R2Now, t)
		}
	}
	for i := 0; i < 5; i++ {
		this.R2StringNow = append(this.R2StringNow, time.Now().Format("2006-01-02 15:04:05"))
	}
	for i := 0; i < 5; i++ {
		this.R2BytesNow = append(this.R2BytesNow, []byte(time.Now().Format("2006-01-02 15:04:05")))
	}
	for i := 0; i < 5; i++ {
		this.R2FStringNow = append(this.R2FStringNow, time.Now().Format("2006-01-02T15:04:05Z07:00"))
	}
	for i := 0; i < 5; i++ {
		this.R2FBytesNow = append(this.R2FBytesNow, []byte(time.Now().Format("2006-01-02T15:04:05Z07:00")))
	}
	return this
}

func NewFinanceMessageGomeetFaker() *FinanceMessage {
	this := &FinanceMessage{}
	this.VisaCreditCard = faker.Finance().CreditCard("visa")
	this.MastercardCreditCard = faker.Finance().CreditCard("mastercard")
	this.AmericanExpressCreditCard = faker.Finance().CreditCard("american_express")
	this.DinersClubCreditCard = faker.Finance().CreditCard("diners_club")
	this.DiscoverCreditCard = faker.Finance().CreditCard("discover")
	this.MaestroCreditCard = faker.Finance().CreditCard("maestro")
	this.SwitchCreditCard = faker.Finance().CreditCard("switch")
	this.SoloCreditCard = faker.Finance().CreditCard("solo")
	this.ForbrugsforeningenCreditCard = faker.Finance().CreditCard("forbrugsforeningen")
	this.DankortCreditCard = faker.Finance().CreditCard("dankort")
	this.LaserCreditCard = faker.Finance().CreditCard("laser")
	// this.UnknowCreditCard  =  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
	this.BytesVisaCreditCard = []byte(faker.Finance().CreditCard("visa"))
	this.BytesMastercardCreditCard = []byte(faker.Finance().CreditCard("mastercard"))
	this.BytesAmericanExpressCreditCard = []byte(faker.Finance().CreditCard("american_express"))
	this.BytesDinersClubCreditCard = []byte(faker.Finance().CreditCard("diners_club"))
	this.BytesDiscoverCreditCard = []byte(faker.Finance().CreditCard("discover"))
	this.BytesMaestroCreditCard = []byte(faker.Finance().CreditCard("maestro"))
	this.BytesSwitchCreditCard = []byte(faker.Finance().CreditCard("switch"))
	this.BytesSoloCreditCard = []byte(faker.Finance().CreditCard("solo"))
	this.BytesForbrugsforeningenCreditCard = []byte(faker.Finance().CreditCard("forbrugsforeningen"))
	this.BytesDankortCreditCard = []byte(faker.Finance().CreditCard("dankort"))
	this.BytesLaserCreditCard = []byte(faker.Finance().CreditCard("laser"))
	// this.BytesUnknowCreditCard  =  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
	this.UVisaCreditCard = faker.Finance().CreditCard("visa")
	this.UMastercardCreditCard = faker.Finance().CreditCard("mastercard")
	this.UAmericanExpressCreditCard = faker.Finance().CreditCard("american_express")
	this.UDinersClubCreditCard = faker.Finance().CreditCard("diners_club")
	this.UDiscoverCreditCard = faker.Finance().CreditCard("discover")
	this.UMaestroCreditCard = faker.Finance().CreditCard("maestro")
	this.USwitchCreditCard = faker.Finance().CreditCard("switch")
	this.USoloCreditCard = faker.Finance().CreditCard("solo")
	this.UForbrugsforeningenCreditCard = faker.Finance().CreditCard("forbrugsforeningen")
	this.UDankortCreditCard = faker.Finance().CreditCard("dankort")
	this.ULaserCreditCard = faker.Finance().CreditCard("laser")
	// this.UUnknowCreditCard  =  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
	this.UBytesVisaCreditCard = []byte(faker.Finance().CreditCard("visa"))
	this.UBytesMastercardCreditCard = []byte(faker.Finance().CreditCard("mastercard"))
	this.UBytesAmericanExpressCreditCard = []byte(faker.Finance().CreditCard("american_express"))
	this.UBytesDinersClubCreditCard = []byte(faker.Finance().CreditCard("diners_club"))
	this.UBytesDiscoverCreditCard = []byte(faker.Finance().CreditCard("discover"))
	this.UBytesMaestroCreditCard = []byte(faker.Finance().CreditCard("maestro"))
	this.UBytesSwitchCreditCard = []byte(faker.Finance().CreditCard("switch"))
	this.UBytesSoloCreditCard = []byte(faker.Finance().CreditCard("solo"))
	this.UBytesForbrugsforeningenCreditCard = []byte(faker.Finance().CreditCard("forbrugsforeningen"))
	this.UBytesDankortCreditCard = []byte(faker.Finance().CreditCard("dankort"))
	this.UBytesLaserCreditCard = []byte(faker.Finance().CreditCard("laser"))
	// this.UBytesUnknowCreditCard  =  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
	this.TVisaCreditCard = faker.Finance().CreditCard("visa")
	this.TMastercardCreditCard = faker.Finance().CreditCard("mastercard")
	this.TAmericanExpressCreditCard = faker.Finance().CreditCard("american_express")
	this.TDinersClubCreditCard = faker.Finance().CreditCard("diners_club")
	this.TDiscoverCreditCard = faker.Finance().CreditCard("discover")
	this.TMaestroCreditCard = faker.Finance().CreditCard("maestro")
	this.TSwitchCreditCard = faker.Finance().CreditCard("switch")
	this.TSoloCreditCard = faker.Finance().CreditCard("solo")
	this.TForbrugsforeningenCreditCard = faker.Finance().CreditCard("forbrugsforeningen")
	this.TDankortCreditCard = faker.Finance().CreditCard("dankort")
	this.TLaserCreditCard = faker.Finance().CreditCard("laser")
	// this.TUnknowCreditCard  =  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
	this.TBytesVisaCreditCard = []byte(faker.Finance().CreditCard("visa"))
	this.TBytesMastercardCreditCard = []byte(faker.Finance().CreditCard("mastercard"))
	this.TBytesAmericanExpressCreditCard = []byte(faker.Finance().CreditCard("american_express"))
	this.TBytesDinersClubCreditCard = []byte(faker.Finance().CreditCard("diners_club"))
	this.TBytesDiscoverCreditCard = []byte(faker.Finance().CreditCard("discover"))
	this.TBytesMaestroCreditCard = []byte(faker.Finance().CreditCard("maestro"))
	this.TBytesSwitchCreditCard = []byte(faker.Finance().CreditCard("switch"))
	this.TBytesSoloCreditCard = []byte(faker.Finance().CreditCard("solo"))
	this.TBytesForbrugsforeningenCreditCard = []byte(faker.Finance().CreditCard("forbrugsforeningen"))
	this.TBytesDankortCreditCard = []byte(faker.Finance().CreditCard("dankort"))
	this.TBytesLaserCreditCard = []byte(faker.Finance().CreditCard("laser"))
	// this.TBytesUnknowCreditCard  =  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
	for i := 0; i < 3; i++ {
		aCurrentRVisaCreditCard := faker.Finance().CreditCard("visa")
		this.RVisaCreditCard = append(this.RVisaCreditCard, aCurrentRVisaCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRMastercardCreditCard := faker.Finance().CreditCard("mastercard")
		this.RMastercardCreditCard = append(this.RMastercardCreditCard, aCurrentRMastercardCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRAmericanExpressCreditCard := faker.Finance().CreditCard("american_express")
		this.RAmericanExpressCreditCard = append(this.RAmericanExpressCreditCard, aCurrentRAmericanExpressCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDinersClubCreditCard := faker.Finance().CreditCard("diners_club")
		this.RDinersClubCreditCard = append(this.RDinersClubCreditCard, aCurrentRDinersClubCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDiscoverCreditCard := faker.Finance().CreditCard("discover")
		this.RDiscoverCreditCard = append(this.RDiscoverCreditCard, aCurrentRDiscoverCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRMaestroCreditCard := faker.Finance().CreditCard("maestro")
		this.RMaestroCreditCard = append(this.RMaestroCreditCard, aCurrentRMaestroCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSwitchCreditCard := faker.Finance().CreditCard("switch")
		this.RSwitchCreditCard = append(this.RSwitchCreditCard, aCurrentRSwitchCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSoloCreditCard := faker.Finance().CreditCard("solo")
		this.RSoloCreditCard = append(this.RSoloCreditCard, aCurrentRSoloCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRForbrugsforeningenCreditCard := faker.Finance().CreditCard("forbrugsforeningen")
		this.RForbrugsforeningenCreditCard = append(this.RForbrugsforeningenCreditCard, aCurrentRForbrugsforeningenCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDankortCreditCard := faker.Finance().CreditCard("dankort")
		this.RDankortCreditCard = append(this.RDankortCreditCard, aCurrentRDankortCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRLaserCreditCard := faker.Finance().CreditCard("laser")
		this.RLaserCreditCard = append(this.RLaserCreditCard, aCurrentRLaserCreditCard)
	}
	for i := 0; i < 3; i++ {
		// aCurrentRUnknowCreditCard  :=  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
		// this.RUnknowCreditCard = append(this.RUnknowCreditCard, aCurrentRUnknowCreditCard) // skipped
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesVisaCreditCard := []byte(faker.Finance().CreditCard("visa"))
		this.RBytesVisaCreditCard = append(this.RBytesVisaCreditCard, aCurrentRBytesVisaCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesMastercardCreditCard := []byte(faker.Finance().CreditCard("mastercard"))
		this.RBytesMastercardCreditCard = append(this.RBytesMastercardCreditCard, aCurrentRBytesMastercardCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesAmericanExpressCreditCard := []byte(faker.Finance().CreditCard("american_express"))
		this.RBytesAmericanExpressCreditCard = append(this.RBytesAmericanExpressCreditCard, aCurrentRBytesAmericanExpressCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesDinersClubCreditCard := []byte(faker.Finance().CreditCard("diners_club"))
		this.RBytesDinersClubCreditCard = append(this.RBytesDinersClubCreditCard, aCurrentRBytesDinersClubCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesDiscoverCreditCard := []byte(faker.Finance().CreditCard("discover"))
		this.RBytesDiscoverCreditCard = append(this.RBytesDiscoverCreditCard, aCurrentRBytesDiscoverCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesMaestroCreditCard := []byte(faker.Finance().CreditCard("maestro"))
		this.RBytesMaestroCreditCard = append(this.RBytesMaestroCreditCard, aCurrentRBytesMaestroCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSwitchCreditCard := []byte(faker.Finance().CreditCard("switch"))
		this.RBytesSwitchCreditCard = append(this.RBytesSwitchCreditCard, aCurrentRBytesSwitchCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSoloCreditCard := []byte(faker.Finance().CreditCard("solo"))
		this.RBytesSoloCreditCard = append(this.RBytesSoloCreditCard, aCurrentRBytesSoloCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesForbrugsforeningenCreditCard := []byte(faker.Finance().CreditCard("forbrugsforeningen"))
		this.RBytesForbrugsforeningenCreditCard = append(this.RBytesForbrugsforeningenCreditCard, aCurrentRBytesForbrugsforeningenCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesDankortCreditCard := []byte(faker.Finance().CreditCard("dankort"))
		this.RBytesDankortCreditCard = append(this.RBytesDankortCreditCard, aCurrentRBytesDankortCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesLaserCreditCard := []byte(faker.Finance().CreditCard("laser"))
		this.RBytesLaserCreditCard = append(this.RBytesLaserCreditCard, aCurrentRBytesLaserCreditCard)
	}
	for i := 0; i < 3; i++ {
		// aCurrentRBytesUnknowCreditCard  :=  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
		// this.RBytesUnknowCreditCard = append(this.RBytesUnknowCreditCard, aCurrentRBytesUnknowCreditCard) // skipped
	}
	for i := 0; i < 3; i++ {
		aCurrentRUVisaCreditCard := faker.Finance().CreditCard("visa")
		this.RUVisaCreditCard = append(this.RUVisaCreditCard, aCurrentRUVisaCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUMastercardCreditCard := faker.Finance().CreditCard("mastercard")
		this.RUMastercardCreditCard = append(this.RUMastercardCreditCard, aCurrentRUMastercardCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUAmericanExpressCreditCard := faker.Finance().CreditCard("american_express")
		this.RUAmericanExpressCreditCard = append(this.RUAmericanExpressCreditCard, aCurrentRUAmericanExpressCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUDinersClubCreditCard := faker.Finance().CreditCard("diners_club")
		this.RUDinersClubCreditCard = append(this.RUDinersClubCreditCard, aCurrentRUDinersClubCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUDiscoverCreditCard := faker.Finance().CreditCard("discover")
		this.RUDiscoverCreditCard = append(this.RUDiscoverCreditCard, aCurrentRUDiscoverCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUMaestroCreditCard := faker.Finance().CreditCard("maestro")
		this.RUMaestroCreditCard = append(this.RUMaestroCreditCard, aCurrentRUMaestroCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUSwitchCreditCard := faker.Finance().CreditCard("switch")
		this.RUSwitchCreditCard = append(this.RUSwitchCreditCard, aCurrentRUSwitchCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUSoloCreditCard := faker.Finance().CreditCard("solo")
		this.RUSoloCreditCard = append(this.RUSoloCreditCard, aCurrentRUSoloCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUForbrugsforeningenCreditCard := faker.Finance().CreditCard("forbrugsforeningen")
		this.RUForbrugsforeningenCreditCard = append(this.RUForbrugsforeningenCreditCard, aCurrentRUForbrugsforeningenCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUDankortCreditCard := faker.Finance().CreditCard("dankort")
		this.RUDankortCreditCard = append(this.RUDankortCreditCard, aCurrentRUDankortCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRULaserCreditCard := faker.Finance().CreditCard("laser")
		this.RULaserCreditCard = append(this.RULaserCreditCard, aCurrentRULaserCreditCard)
	}
	for i := 0; i < 3; i++ {
		// aCurrentRUUnknowCreditCard  :=  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
		// this.RUUnknowCreditCard = append(this.RUUnknowCreditCard, aCurrentRUUnknowCreditCard) // skipped
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesVisaCreditCard := []byte(faker.Finance().CreditCard("visa"))
		this.RUBytesVisaCreditCard = append(this.RUBytesVisaCreditCard, aCurrentRUBytesVisaCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesMastercardCreditCard := []byte(faker.Finance().CreditCard("mastercard"))
		this.RUBytesMastercardCreditCard = append(this.RUBytesMastercardCreditCard, aCurrentRUBytesMastercardCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesAmericanExpressCreditCard := []byte(faker.Finance().CreditCard("american_express"))
		this.RUBytesAmericanExpressCreditCard = append(this.RUBytesAmericanExpressCreditCard, aCurrentRUBytesAmericanExpressCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesDinersClubCreditCard := []byte(faker.Finance().CreditCard("diners_club"))
		this.RUBytesDinersClubCreditCard = append(this.RUBytesDinersClubCreditCard, aCurrentRUBytesDinersClubCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesDiscoverCreditCard := []byte(faker.Finance().CreditCard("discover"))
		this.RUBytesDiscoverCreditCard = append(this.RUBytesDiscoverCreditCard, aCurrentRUBytesDiscoverCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesMaestroCreditCard := []byte(faker.Finance().CreditCard("maestro"))
		this.RUBytesMaestroCreditCard = append(this.RUBytesMaestroCreditCard, aCurrentRUBytesMaestroCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesSwitchCreditCard := []byte(faker.Finance().CreditCard("switch"))
		this.RUBytesSwitchCreditCard = append(this.RUBytesSwitchCreditCard, aCurrentRUBytesSwitchCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesSoloCreditCard := []byte(faker.Finance().CreditCard("solo"))
		this.RUBytesSoloCreditCard = append(this.RUBytesSoloCreditCard, aCurrentRUBytesSoloCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesForbrugsforeningenCreditCard := []byte(faker.Finance().CreditCard("forbrugsforeningen"))
		this.RUBytesForbrugsforeningenCreditCard = append(this.RUBytesForbrugsforeningenCreditCard, aCurrentRUBytesForbrugsforeningenCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesDankortCreditCard := []byte(faker.Finance().CreditCard("dankort"))
		this.RUBytesDankortCreditCard = append(this.RUBytesDankortCreditCard, aCurrentRUBytesDankortCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUBytesLaserCreditCard := []byte(faker.Finance().CreditCard("laser"))
		this.RUBytesLaserCreditCard = append(this.RUBytesLaserCreditCard, aCurrentRUBytesLaserCreditCard)
	}
	for i := 0; i < 3; i++ {
		// aCurrentRUBytesUnknowCreditCard  :=  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
		// this.RUBytesUnknowCreditCard = append(this.RUBytesUnknowCreditCard, aCurrentRUBytesUnknowCreditCard) // skipped
	}
	for i := 0; i < 3; i++ {
		aCurrentRTVisaCreditCard := faker.Finance().CreditCard("visa")
		this.RTVisaCreditCard = append(this.RTVisaCreditCard, aCurrentRTVisaCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTMastercardCreditCard := faker.Finance().CreditCard("mastercard")
		this.RTMastercardCreditCard = append(this.RTMastercardCreditCard, aCurrentRTMastercardCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTAmericanExpressCreditCard := faker.Finance().CreditCard("american_express")
		this.RTAmericanExpressCreditCard = append(this.RTAmericanExpressCreditCard, aCurrentRTAmericanExpressCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTDinersClubCreditCard := faker.Finance().CreditCard("diners_club")
		this.RTDinersClubCreditCard = append(this.RTDinersClubCreditCard, aCurrentRTDinersClubCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTDiscoverCreditCard := faker.Finance().CreditCard("discover")
		this.RTDiscoverCreditCard = append(this.RTDiscoverCreditCard, aCurrentRTDiscoverCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTMaestroCreditCard := faker.Finance().CreditCard("maestro")
		this.RTMaestroCreditCard = append(this.RTMaestroCreditCard, aCurrentRTMaestroCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTSwitchCreditCard := faker.Finance().CreditCard("switch")
		this.RTSwitchCreditCard = append(this.RTSwitchCreditCard, aCurrentRTSwitchCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTSoloCreditCard := faker.Finance().CreditCard("solo")
		this.RTSoloCreditCard = append(this.RTSoloCreditCard, aCurrentRTSoloCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTForbrugsforeningenCreditCard := faker.Finance().CreditCard("forbrugsforeningen")
		this.RTForbrugsforeningenCreditCard = append(this.RTForbrugsforeningenCreditCard, aCurrentRTForbrugsforeningenCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTDankortCreditCard := faker.Finance().CreditCard("dankort")
		this.RTDankortCreditCard = append(this.RTDankortCreditCard, aCurrentRTDankortCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTLaserCreditCard := faker.Finance().CreditCard("laser")
		this.RTLaserCreditCard = append(this.RTLaserCreditCard, aCurrentRTLaserCreditCard)
	}
	for i := 0; i < 3; i++ {
		// aCurrentRTUnknowCreditCard  :=  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
		// this.RTUnknowCreditCard = append(this.RTUnknowCreditCard, aCurrentRTUnknowCreditCard) // skipped
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesVisaCreditCard := []byte(faker.Finance().CreditCard("visa"))
		this.RTBytesVisaCreditCard = append(this.RTBytesVisaCreditCard, aCurrentRTBytesVisaCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesMastercardCreditCard := []byte(faker.Finance().CreditCard("mastercard"))
		this.RTBytesMastercardCreditCard = append(this.RTBytesMastercardCreditCard, aCurrentRTBytesMastercardCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesAmericanExpressCreditCard := []byte(faker.Finance().CreditCard("american_express"))
		this.RTBytesAmericanExpressCreditCard = append(this.RTBytesAmericanExpressCreditCard, aCurrentRTBytesAmericanExpressCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesDinersClubCreditCard := []byte(faker.Finance().CreditCard("diners_club"))
		this.RTBytesDinersClubCreditCard = append(this.RTBytesDinersClubCreditCard, aCurrentRTBytesDinersClubCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesDiscoverCreditCard := []byte(faker.Finance().CreditCard("discover"))
		this.RTBytesDiscoverCreditCard = append(this.RTBytesDiscoverCreditCard, aCurrentRTBytesDiscoverCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesMaestroCreditCard := []byte(faker.Finance().CreditCard("maestro"))
		this.RTBytesMaestroCreditCard = append(this.RTBytesMaestroCreditCard, aCurrentRTBytesMaestroCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesSwitchCreditCard := []byte(faker.Finance().CreditCard("switch"))
		this.RTBytesSwitchCreditCard = append(this.RTBytesSwitchCreditCard, aCurrentRTBytesSwitchCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesSoloCreditCard := []byte(faker.Finance().CreditCard("solo"))
		this.RTBytesSoloCreditCard = append(this.RTBytesSoloCreditCard, aCurrentRTBytesSoloCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesForbrugsforeningenCreditCard := []byte(faker.Finance().CreditCard("forbrugsforeningen"))
		this.RTBytesForbrugsforeningenCreditCard = append(this.RTBytesForbrugsforeningenCreditCard, aCurrentRTBytesForbrugsforeningenCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesDankortCreditCard := []byte(faker.Finance().CreditCard("dankort"))
		this.RTBytesDankortCreditCard = append(this.RTBytesDankortCreditCard, aCurrentRTBytesDankortCreditCard)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTBytesLaserCreditCard := []byte(faker.Finance().CreditCard("laser"))
		this.RTBytesLaserCreditCard = append(this.RTBytesLaserCreditCard, aCurrentRTBytesLaserCreditCard)
	}
	for i := 0; i < 3; i++ {
		// aCurrentRTBytesUnknowCreditCard  :=  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
		// this.RTBytesUnknowCreditCard = append(this.RTBytesUnknowCreditCard, aCurrentRTBytesUnknowCreditCard) // skipped
	}
	for i := 0; i < 5; i++ {
		aCurrentR2VisaCreditCard := faker.Finance().CreditCard("visa")
		this.R2VisaCreditCard = append(this.R2VisaCreditCard, aCurrentR2VisaCreditCard)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2MastercardCreditCard := faker.Finance().CreditCard("mastercard")
		this.R2MastercardCreditCard = append(this.R2MastercardCreditCard, aCurrentR2MastercardCreditCard)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2AmericanExpressCreditCard := faker.Finance().CreditCard("american_express")
		this.R2AmericanExpressCreditCard = append(this.R2AmericanExpressCreditCard, aCurrentR2AmericanExpressCreditCard)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2DinersClubCreditCard := faker.Finance().CreditCard("diners_club")
		this.R2DinersClubCreditCard = append(this.R2DinersClubCreditCard, aCurrentR2DinersClubCreditCard)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2DiscoverCreditCard := faker.Finance().CreditCard("discover")
		this.R2DiscoverCreditCard = append(this.R2DiscoverCreditCard, aCurrentR2DiscoverCreditCard)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2MaestroCreditCard := faker.Finance().CreditCard("maestro")
		this.R2MaestroCreditCard = append(this.R2MaestroCreditCard, aCurrentR2MaestroCreditCard)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2SwitchCreditCard := faker.Finance().CreditCard("switch")
		this.R2SwitchCreditCard = append(this.R2SwitchCreditCard, aCurrentR2SwitchCreditCard)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2SoloCreditCard := faker.Finance().CreditCard("solo")
		this.R2SoloCreditCard = append(this.R2SoloCreditCard, aCurrentR2SoloCreditCard)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2ForbrugsforeningenCreditCard := faker.Finance().CreditCard("forbrugsforeningen")
		this.R2ForbrugsforeningenCreditCard = append(this.R2ForbrugsforeningenCreditCard, aCurrentR2ForbrugsforeningenCreditCard)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2DankortCreditCard := faker.Finance().CreditCard("dankort")
		this.R2DankortCreditCard = append(this.R2DankortCreditCard, aCurrentR2DankortCreditCard)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2LaserCreditCard := faker.Finance().CreditCard("laser")
		this.R2LaserCreditCard = append(this.R2LaserCreditCard, aCurrentR2LaserCreditCard)
	}
	for i := 0; i < 5; i++ {
		// aCurrentR2UnknowCreditCard  :=  faker.Finance().CreditCard("unknow") // skipped unknow credit_card type [(gomeetfaker.field).finance.credit_card = {type: "unknow"}]
		// this.R2UnknowCreditCard = append(this.R2UnknowCreditCard, aCurrentR2UnknowCreditCard) // skipped
	}
	return this
}

func NewHackerMessageGomeetFaker() *HackerMessage {
	this := &HackerMessage{}
	this.SaySomethingSmart = faker.Hacker().SaySomethingSmart()
	this.Abbreviation = faker.Hacker().Abbreviation()
	this.Adjective = faker.Hacker().Adjective()
	this.Noun = faker.Hacker().Noun()
	this.Verb = faker.Hacker().Verb()
	this.IngVerb = faker.Hacker().IngVerb()
	this.Phrases = strings.Join(faker.Hacker().Phrases(), " ")
	this.BytesSaySomethingSmart = []byte(faker.Hacker().SaySomethingSmart())
	this.BytesAbbreviation = []byte(faker.Hacker().Abbreviation())
	this.BytesAdjective = []byte(faker.Hacker().Adjective())
	this.BytesNoun = []byte(faker.Hacker().Noun())
	this.BytesVerb = []byte(faker.Hacker().Verb())
	this.BytesIngVerb = []byte(faker.Hacker().IngVerb())
	this.BytesPhrases = []byte(strings.Join(faker.Hacker().Phrases(), " "))
	for i := 0; i < 3; i++ {
		aCurrentRSaySomethingSmart := faker.Hacker().SaySomethingSmart()
		this.RSaySomethingSmart = append(this.RSaySomethingSmart, aCurrentRSaySomethingSmart)
	}
	for i := 0; i < 3; i++ {
		aCurrentRAbbreviation := faker.Hacker().Abbreviation()
		this.RAbbreviation = append(this.RAbbreviation, aCurrentRAbbreviation)
	}
	for i := 0; i < 3; i++ {
		aCurrentRAdjective := faker.Hacker().Adjective()
		this.RAdjective = append(this.RAdjective, aCurrentRAdjective)
	}
	for i := 0; i < 3; i++ {
		aCurrentRNoun := faker.Hacker().Noun()
		this.RNoun = append(this.RNoun, aCurrentRNoun)
	}
	for i := 0; i < 3; i++ {
		aCurrentRVerb := faker.Hacker().Verb()
		this.RVerb = append(this.RVerb, aCurrentRVerb)
	}
	for i := 0; i < 3; i++ {
		aCurrentRIngVerb := faker.Hacker().IngVerb()
		this.RIngVerb = append(this.RIngVerb, aCurrentRIngVerb)
	}
	for i := 0; i < 3; i++ {
		aCurrentRPhrases := strings.Join(faker.Hacker().Phrases(), " ")
		this.RPhrases = append(this.RPhrases, aCurrentRPhrases)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSaySomethingSmart := []byte(faker.Hacker().SaySomethingSmart())
		this.RBytesSaySomethingSmart = append(this.RBytesSaySomethingSmart, aCurrentRBytesSaySomethingSmart)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesAbbreviation := []byte(faker.Hacker().Abbreviation())
		this.RBytesAbbreviation = append(this.RBytesAbbreviation, aCurrentRBytesAbbreviation)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesAdjective := []byte(faker.Hacker().Adjective())
		this.RBytesAdjective = append(this.RBytesAdjective, aCurrentRBytesAdjective)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesNoun := []byte(faker.Hacker().Noun())
		this.RBytesNoun = append(this.RBytesNoun, aCurrentRBytesNoun)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesVerb := []byte(faker.Hacker().Verb())
		this.RBytesVerb = append(this.RBytesVerb, aCurrentRBytesVerb)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesIngVerb := []byte(faker.Hacker().IngVerb())
		this.RBytesIngVerb = append(this.RBytesIngVerb, aCurrentRBytesIngVerb)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesPhrases := []byte(strings.Join(faker.Hacker().Phrases(), " "))
		this.RBytesPhrases = append(this.RBytesPhrases, aCurrentRBytesPhrases)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2SaySomethingSmart := faker.Hacker().SaySomethingSmart()
		this.R2SaySomethingSmart = append(this.R2SaySomethingSmart, aCurrentR2SaySomethingSmart)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Abbreviation := faker.Hacker().Abbreviation()
		this.R2Abbreviation = append(this.R2Abbreviation, aCurrentR2Abbreviation)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Adjective := faker.Hacker().Adjective()
		this.R2Adjective = append(this.R2Adjective, aCurrentR2Adjective)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Noun := faker.Hacker().Noun()
		this.R2Noun = append(this.R2Noun, aCurrentR2Noun)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Verb := faker.Hacker().Verb()
		this.R2Verb = append(this.R2Verb, aCurrentR2Verb)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2IngVerb := faker.Hacker().IngVerb()
		this.R2IngVerb = append(this.R2IngVerb, aCurrentR2IngVerb)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Phrases := strings.Join(faker.Hacker().Phrases(), " ")
		this.R2Phrases = append(this.R2Phrases, aCurrentR2Phrases)
	}
	return this
}

func NewInternetMessageGomeetFaker() *InternetMessage {
	this := &InternetMessage{}
	this.Email = faker.Internet().Email()
	this.FreeEmail = faker.Internet().FreeEmail()
	this.SafeEmail = faker.Internet().SafeEmail()
	this.UserName = faker.Internet().UserName()
	this.Password = faker.Internet().Password(6, 20)
	this.DomainName = faker.Internet().DomainName()
	this.DomainWord = faker.Internet().DomainWord()
	this.DomainSuffix = faker.Internet().DomainSuffix()
	this.MacAddress = faker.Internet().MacAddress()
	this.Ipv4Address = faker.Internet().IpV4Address()
	this.Ipv6Address = faker.Internet().IpV6Address()
	this.Url = faker.Internet().Url()
	this.Slug = faker.Internet().Slug()
	this.BytesEmail = []byte(faker.Internet().Email())
	this.BytesFreeEmail = []byte(faker.Internet().FreeEmail())
	this.BytesSafeEmail = []byte(faker.Internet().SafeEmail())
	this.BytesUserName = []byte(faker.Internet().UserName())
	this.BytesPassword = []byte(faker.Internet().Password(6, 20))
	this.BytesDomainName = []byte(faker.Internet().DomainName())
	this.BytesDomainWord = []byte(faker.Internet().DomainWord())
	this.BytesDomainSuffix = []byte(faker.Internet().DomainSuffix())
	this.BytesMacAddress = []byte(faker.Internet().MacAddress())
	this.BytesIpv4Address = []byte(faker.Internet().IpV4Address())
	this.BytesIpv6Address = []byte(faker.Internet().IpV6Address())
	this.BytesUrl = []byte(faker.Internet().Url())
	this.BytesSlug = []byte(faker.Internet().Slug())
	for i := 0; i < 3; i++ {
		aCurrentREmail := faker.Internet().Email()
		this.REmail = append(this.REmail, aCurrentREmail)
	}
	for i := 0; i < 3; i++ {
		aCurrentRFreeEmail := faker.Internet().FreeEmail()
		this.RFreeEmail = append(this.RFreeEmail, aCurrentRFreeEmail)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSafeEmail := faker.Internet().SafeEmail()
		this.RSafeEmail = append(this.RSafeEmail, aCurrentRSafeEmail)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUserName := faker.Internet().UserName()
		this.RUserName = append(this.RUserName, aCurrentRUserName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRPassword := faker.Internet().Password(6, 20)
		this.RPassword = append(this.RPassword, aCurrentRPassword)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDomainName := faker.Internet().DomainName()
		this.RDomainName = append(this.RDomainName, aCurrentRDomainName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDomainWord := faker.Internet().DomainWord()
		this.RDomainWord = append(this.RDomainWord, aCurrentRDomainWord)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDomainSuffix := faker.Internet().DomainSuffix()
		this.RDomainSuffix = append(this.RDomainSuffix, aCurrentRDomainSuffix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRMacAddress := faker.Internet().MacAddress()
		this.RMacAddress = append(this.RMacAddress, aCurrentRMacAddress)
	}
	for i := 0; i < 3; i++ {
		aCurrentRIpv4Address := faker.Internet().IpV4Address()
		this.RIpv4Address = append(this.RIpv4Address, aCurrentRIpv4Address)
	}
	for i := 0; i < 3; i++ {
		aCurrentRIpv6Address := faker.Internet().IpV6Address()
		this.RIpv6Address = append(this.RIpv6Address, aCurrentRIpv6Address)
	}
	for i := 0; i < 3; i++ {
		aCurrentRUrl := faker.Internet().Url()
		this.RUrl = append(this.RUrl, aCurrentRUrl)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSlug := faker.Internet().Slug()
		this.RSlug = append(this.RSlug, aCurrentRSlug)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesEmail := []byte(faker.Internet().Email())
		this.RBytesEmail = append(this.RBytesEmail, aCurrentRBytesEmail)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesFreeEmail := []byte(faker.Internet().FreeEmail())
		this.RBytesFreeEmail = append(this.RBytesFreeEmail, aCurrentRBytesFreeEmail)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSafeEmail := []byte(faker.Internet().SafeEmail())
		this.RBytesSafeEmail = append(this.RBytesSafeEmail, aCurrentRBytesSafeEmail)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesUserName := []byte(faker.Internet().UserName())
		this.RBytesUserName = append(this.RBytesUserName, aCurrentRBytesUserName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesPassword := []byte(faker.Internet().Password(6, 20))
		this.RBytesPassword = append(this.RBytesPassword, aCurrentRBytesPassword)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesDomainName := []byte(faker.Internet().DomainName())
		this.RBytesDomainName = append(this.RBytesDomainName, aCurrentRBytesDomainName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesDomainWord := []byte(faker.Internet().DomainWord())
		this.RBytesDomainWord = append(this.RBytesDomainWord, aCurrentRBytesDomainWord)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesDomainSuffix := []byte(faker.Internet().DomainSuffix())
		this.RBytesDomainSuffix = append(this.RBytesDomainSuffix, aCurrentRBytesDomainSuffix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesMacAddress := []byte(faker.Internet().MacAddress())
		this.RBytesMacAddress = append(this.RBytesMacAddress, aCurrentRBytesMacAddress)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesIpv4Address := []byte(faker.Internet().IpV4Address())
		this.RBytesIpv4Address = append(this.RBytesIpv4Address, aCurrentRBytesIpv4Address)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesIpv6Address := []byte(faker.Internet().IpV6Address())
		this.RBytesIpv6Address = append(this.RBytesIpv6Address, aCurrentRBytesIpv6Address)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesUrl := []byte(faker.Internet().Url())
		this.RBytesUrl = append(this.RBytesUrl, aCurrentRBytesUrl)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSlug := []byte(faker.Internet().Slug())
		this.RBytesSlug = append(this.RBytesSlug, aCurrentRBytesSlug)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Email := faker.Internet().Email()
		this.R2Email = append(this.R2Email, aCurrentR2Email)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2FreeEmail := faker.Internet().FreeEmail()
		this.R2FreeEmail = append(this.R2FreeEmail, aCurrentR2FreeEmail)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2SafeEmail := faker.Internet().SafeEmail()
		this.R2SafeEmail = append(this.R2SafeEmail, aCurrentR2SafeEmail)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2UserName := faker.Internet().UserName()
		this.R2UserName = append(this.R2UserName, aCurrentR2UserName)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Password := faker.Internet().Password(6, 20)
		this.R2Password = append(this.R2Password, aCurrentR2Password)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2DomainName := faker.Internet().DomainName()
		this.R2DomainName = append(this.R2DomainName, aCurrentR2DomainName)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2DomainWord := faker.Internet().DomainWord()
		this.R2DomainWord = append(this.R2DomainWord, aCurrentR2DomainWord)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2DomainSuffix := faker.Internet().DomainSuffix()
		this.R2DomainSuffix = append(this.R2DomainSuffix, aCurrentR2DomainSuffix)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2MacAddress := faker.Internet().MacAddress()
		this.R2MacAddress = append(this.R2MacAddress, aCurrentR2MacAddress)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Ipv4Address := faker.Internet().IpV4Address()
		this.R2Ipv4Address = append(this.R2Ipv4Address, aCurrentR2Ipv4Address)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Ipv6Address := faker.Internet().IpV6Address()
		this.R2Ipv6Address = append(this.R2Ipv6Address, aCurrentR2Ipv6Address)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Url := faker.Internet().Url()
		this.R2Url = append(this.R2Url, aCurrentR2Url)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Slug := faker.Internet().Slug()
		this.R2Slug = append(this.R2Slug, aCurrentR2Slug)
	}
	return this
}

func NewLoremMessageGomeetFaker() *LoremMessage {
	this := &LoremMessage{}
	this.Character = faker.Lorem().Character()
	this.Characters = faker.Lorem().Characters(6)
	this.Word = faker.Lorem().Word()
	this.Words = strings.Join(faker.Lorem().Words(3), " ")
	this.Sentence = faker.Lorem().Sentence(3)
	this.Sentences = strings.Join(faker.Lorem().Sentences(3), " ")
	this.Paragraph = faker.Lorem().Paragraph(3)
	this.Paragraphs = strings.Join(faker.Lorem().Paragraphs(3), " ")
	this.String_ = faker.Lorem().String()
	this.BytesCharacter = []byte(faker.Lorem().Character())
	this.BytesCharacters = []byte(faker.Lorem().Characters(6))
	this.BytesWord = []byte(faker.Lorem().Word())
	this.BytesWords = []byte(strings.Join(faker.Lorem().Words(3), " "))
	this.BytesSentence = []byte(faker.Lorem().Sentence(3))
	this.BytesSentences = []byte(strings.Join(faker.Lorem().Sentences(3), " "))
	this.BytesParagraph = []byte(faker.Lorem().Paragraph(3))
	this.BytesParagraphs = []byte(strings.Join(faker.Lorem().Paragraphs(3), " "))
	this.BytesString = []byte(faker.Lorem().String())
	for i := 0; i < 3; i++ {
		aCurrentRCharacter := faker.Lorem().Character()
		this.RCharacter = append(this.RCharacter, aCurrentRCharacter)
	}
	for i := 0; i < 3; i++ {
		aCurrentRCharacters := faker.Lorem().Characters(6)
		this.RCharacters = append(this.RCharacters, aCurrentRCharacters)
	}
	for i := 0; i < 3; i++ {
		aCurrentRWord := faker.Lorem().Word()
		this.RWord = append(this.RWord, aCurrentRWord)
	}
	for i := 0; i < 3; i++ {
		aCurrentRWords := strings.Join(faker.Lorem().Words(3), " ")
		this.RWords = append(this.RWords, aCurrentRWords)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSentence := faker.Lorem().Sentence(3)
		this.RSentence = append(this.RSentence, aCurrentRSentence)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSentences := strings.Join(faker.Lorem().Sentences(3), " ")
		this.RSentences = append(this.RSentences, aCurrentRSentences)
	}
	for i := 0; i < 3; i++ {
		aCurrentRParagraph := faker.Lorem().Paragraph(3)
		this.RParagraph = append(this.RParagraph, aCurrentRParagraph)
	}
	for i := 0; i < 3; i++ {
		aCurrentRParagraphs := strings.Join(faker.Lorem().Paragraphs(3), " ")
		this.RParagraphs = append(this.RParagraphs, aCurrentRParagraphs)
	}
	for i := 0; i < 3; i++ {
		aCurrentRString := faker.Lorem().String()
		this.RString = append(this.RString, aCurrentRString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCharacter := []byte(faker.Lorem().Character())
		this.RBytesCharacter = append(this.RBytesCharacter, aCurrentRBytesCharacter)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCharacters := []byte(faker.Lorem().Characters(6))
		this.RBytesCharacters = append(this.RBytesCharacters, aCurrentRBytesCharacters)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesWord := []byte(faker.Lorem().Word())
		this.RBytesWord = append(this.RBytesWord, aCurrentRBytesWord)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesWords := []byte(strings.Join(faker.Lorem().Words(3), " "))
		this.RBytesWords = append(this.RBytesWords, aCurrentRBytesWords)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSentence := []byte(faker.Lorem().Sentence(3))
		this.RBytesSentence = append(this.RBytesSentence, aCurrentRBytesSentence)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSentences := []byte(strings.Join(faker.Lorem().Sentences(3), " "))
		this.RBytesSentences = append(this.RBytesSentences, aCurrentRBytesSentences)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesParagraph := []byte(faker.Lorem().Paragraph(3))
		this.RBytesParagraph = append(this.RBytesParagraph, aCurrentRBytesParagraph)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesParagraphs := []byte(strings.Join(faker.Lorem().Paragraphs(3), " "))
		this.RBytesParagraphs = append(this.RBytesParagraphs, aCurrentRBytesParagraphs)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesString := []byte(faker.Lorem().String())
		this.RBytesString = append(this.RBytesString, aCurrentRBytesString)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Character := faker.Lorem().Character()
		this.R2Character = append(this.R2Character, aCurrentR2Character)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Characters := faker.Lorem().Characters(6)
		this.R2Characters = append(this.R2Characters, aCurrentR2Characters)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Word := faker.Lorem().Word()
		this.R2Word = append(this.R2Word, aCurrentR2Word)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Words := strings.Join(faker.Lorem().Words(3), " ")
		this.R2Words = append(this.R2Words, aCurrentR2Words)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Sentence := faker.Lorem().Sentence(3)
		this.R2Sentence = append(this.R2Sentence, aCurrentR2Sentence)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Sentences := strings.Join(faker.Lorem().Sentences(3), " ")
		this.R2Sentences = append(this.R2Sentences, aCurrentR2Sentences)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Paragraph := faker.Lorem().Paragraph(3)
		this.R2Paragraph = append(this.R2Paragraph, aCurrentR2Paragraph)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Paragraphs := strings.Join(faker.Lorem().Paragraphs(3), " ")
		this.R2Paragraphs = append(this.R2Paragraphs, aCurrentR2Paragraphs)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2String := faker.Lorem().String()
		this.R2String = append(this.R2String, aCurrentR2String)
	}
	return this
}

func NewNameMessageGomeetFaker() *NameMessage {
	this := &NameMessage{}
	this.Name = faker.Name().Name()
	this.FirstName = faker.Name().FirstName()
	this.LastName = faker.Name().LastName()
	this.Prefix = faker.Name().Prefix()
	this.Suffix = faker.Name().Suffix()
	this.Title = faker.Name().Title()
	this.String_ = faker.Name().String()
	this.BytesName = []byte(faker.Name().Name())
	this.BytesFirstName = []byte(faker.Name().FirstName())
	this.BytesLastName = []byte(faker.Name().LastName())
	this.BytesPrefix = []byte(faker.Name().Prefix())
	this.BytesSuffix = []byte(faker.Name().Suffix())
	this.BytesTitle = []byte(faker.Name().Title())
	this.BytesString = []byte(faker.Name().String())
	for i := 0; i < 3; i++ {
		aCurrentRName := faker.Name().Name()
		this.RName = append(this.RName, aCurrentRName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRFirstName := faker.Name().FirstName()
		this.RFirstName = append(this.RFirstName, aCurrentRFirstName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRLastName := faker.Name().LastName()
		this.RLastName = append(this.RLastName, aCurrentRLastName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRPrefix := faker.Name().Prefix()
		this.RPrefix = append(this.RPrefix, aCurrentRPrefix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSuffix := faker.Name().Suffix()
		this.RSuffix = append(this.RSuffix, aCurrentRSuffix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRTitle := faker.Name().Title()
		this.RTitle = append(this.RTitle, aCurrentRTitle)
	}
	for i := 0; i < 3; i++ {
		aCurrentRString := faker.Name().String()
		this.RString = append(this.RString, aCurrentRString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesName := []byte(faker.Name().Name())
		this.RBytesName = append(this.RBytesName, aCurrentRBytesName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesFirstName := []byte(faker.Name().FirstName())
		this.RBytesFirstName = append(this.RBytesFirstName, aCurrentRBytesFirstName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesLastName := []byte(faker.Name().LastName())
		this.RBytesLastName = append(this.RBytesLastName, aCurrentRBytesLastName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesPrefix := []byte(faker.Name().Prefix())
		this.RBytesPrefix = append(this.RBytesPrefix, aCurrentRBytesPrefix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSuffix := []byte(faker.Name().Suffix())
		this.RBytesSuffix = append(this.RBytesSuffix, aCurrentRBytesSuffix)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesTitle := []byte(faker.Name().Title())
		this.RBytesTitle = append(this.RBytesTitle, aCurrentRBytesTitle)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesString := []byte(faker.Name().String())
		this.RBytesString = append(this.RBytesString, aCurrentRBytesString)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Name := faker.Name().Name()
		this.R2Name = append(this.R2Name, aCurrentR2Name)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2FirstName := faker.Name().FirstName()
		this.R2FirstName = append(this.R2FirstName, aCurrentR2FirstName)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2LastName := faker.Name().LastName()
		this.R2LastName = append(this.R2LastName, aCurrentR2LastName)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Prefix := faker.Name().Prefix()
		this.R2Prefix = append(this.R2Prefix, aCurrentR2Prefix)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Suffix := faker.Name().Suffix()
		this.R2Suffix = append(this.R2Suffix, aCurrentR2Suffix)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Title := faker.Name().Title()
		this.R2Title = append(this.R2Title, aCurrentR2Title)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2String := faker.Name().String()
		this.R2String = append(this.R2String, aCurrentR2String)
	}
	return this
}

func NewNumberMessageGomeetFaker() *NumberMessage {
	this := &NumberMessage{}
	this.Number = faker.Number().Number(3)
	this.Decimal = faker.Number().Decimal(5, 2)
	this.Digit = faker.Number().Digit()
	this.Hexadecimal = faker.Number().Hexadecimal(3)
	this.Between = faker.Number().Between(17, 99)
	this.Positive = faker.Number().Positive(100)
	this.Negative = faker.Number().Negative(-100)
	this.BytesNumber = []byte(faker.Number().Number(3))
	this.BytesDecimal = []byte(faker.Number().Decimal(5, 2))
	this.BytesDigit = []byte(faker.Number().Digit())
	this.BytesHexadecimal = []byte(faker.Number().Hexadecimal(3))
	this.BytesBetween = []byte(faker.Number().Between(17, 99))
	this.BytesPositive = []byte(faker.Number().Positive(100))
	this.BytesNegative = []byte(faker.Number().Negative(-100))
	if v, err := strconv.ParseFloat(faker.Number().Number(3), 32); err == nil {
		this.FloatNumber = float32(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Decimal(5, 2), 32); err == nil {
		this.FloatDecimal = float32(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Digit(), 32); err == nil {
		this.FloatDigit = float32(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Between(17, 99), 32); err == nil {
		this.FloatBetween = float32(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Positive(100), 32); err == nil {
		this.FloatPositive = float32(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Negative(-100), 32); err == nil {
		this.FloatNegative = float32(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Number(3), 64); err == nil {
		this.DoubleNumber = float64(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Decimal(5, 2), 64); err == nil {
		this.DoubleDecimal = float64(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Digit(), 64); err == nil {
		this.DoubleDigit = float64(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Between(17, 99), 64); err == nil {
		this.DoubleBetween = float64(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Positive(100), 64); err == nil {
		this.DoublePositive = float64(v)
	}
	if v, err := strconv.ParseFloat(faker.Number().Negative(-100), 64); err == nil {
		this.DoubleNegative = float64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
		this.Int32Number = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 32); err == nil {
		this.Int32Digit = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 32); err == nil {
		this.Int32Between = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 32); err == nil {
		this.Int32Positive = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 32); err == nil {
		this.Int32Negative = int32(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 32); err == nil {
		this.Uint32Number = uint32(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Digit(), 10, 32); err == nil {
		this.Uint32Digit = uint32(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Between(17, 99), 10, 32); err == nil {
		this.Uint32Between = uint32(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Positive(100), 10, 32); err == nil {
		this.Uint32Positive = uint32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
		this.Int64Number = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 64); err == nil {
		this.Int64Digit = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 64); err == nil {
		this.Int64Between = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 64); err == nil {
		this.Int64Positive = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 64); err == nil {
		this.Int64Negative = int64(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 64); err == nil {
		this.Uint64Number = uint64(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Digit(), 10, 64); err == nil {
		this.Uint64Digit = uint64(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Between(17, 99), 10, 64); err == nil {
		this.Uint64Between = uint64(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Positive(100), 10, 64); err == nil {
		this.Uint64Positive = uint64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
		this.Sint32Number = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 32); err == nil {
		this.Sint32Digit = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 32); err == nil {
		this.Sint32Between = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 32); err == nil {
		this.Sint32Positive = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 32); err == nil {
		this.Sint32Negative = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
		this.Sint64Number = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 64); err == nil {
		this.Sint64Digit = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 64); err == nil {
		this.Sint64Between = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 64); err == nil {
		this.Sint64Positive = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 64); err == nil {
		this.Sint64Negative = int64(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 32); err == nil {
		this.Fixed32Number = uint32(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Digit(), 10, 32); err == nil {
		this.Fixed32Digit = uint32(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Between(17, 99), 10, 32); err == nil {
		this.Fixed32Between = uint32(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Positive(100), 10, 32); err == nil {
		this.Fixed32Positive = uint32(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 64); err == nil {
		this.Fixed64Number = uint64(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Digit(), 10, 64); err == nil {
		this.Fixed64Digit = uint64(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Between(17, 99), 10, 64); err == nil {
		this.Fixed64Between = uint64(v)
	}
	if v, err := strconv.ParseUint(faker.Number().Positive(100), 10, 64); err == nil {
		this.Fixed64Positive = uint64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
		this.Sfixed32Number = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 32); err == nil {
		this.Sfixed32Digit = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 32); err == nil {
		this.Sfixed32Between = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 32); err == nil {
		this.Sfixed32Positive = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 32); err == nil {
		this.Sfixed32Negative = int32(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
		this.Sfixed64Number = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 64); err == nil {
		this.Sfixed64Digit = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 64); err == nil {
		this.Sfixed64Between = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 64); err == nil {
		this.Sfixed64Positive = int64(v)
	}
	if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 64); err == nil {
		this.Sfixed64Negative = int64(v)
	}
	for i := 0; i < 3; i++ {
		aCurrentRNumber := faker.Number().Number(3)
		this.RNumber = append(this.RNumber, aCurrentRNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDecimal := faker.Number().Decimal(5, 2)
		this.RDecimal = append(this.RDecimal, aCurrentRDecimal)
	}
	for i := 0; i < 3; i++ {
		aCurrentRDigit := faker.Number().Digit()
		this.RDigit = append(this.RDigit, aCurrentRDigit)
	}
	for i := 0; i < 3; i++ {
		aCurrentRHexadecimal := faker.Number().Hexadecimal(3)
		this.RHexadecimal = append(this.RHexadecimal, aCurrentRHexadecimal)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBetween := faker.Number().Between(17, 99)
		this.RBetween = append(this.RBetween, aCurrentRBetween)
	}
	for i := 0; i < 3; i++ {
		aCurrentRPositive := faker.Number().Positive(100)
		this.RPositive = append(this.RPositive, aCurrentRPositive)
	}
	for i := 0; i < 3; i++ {
		aCurrentRNegative := faker.Number().Negative(-100)
		this.RNegative = append(this.RNegative, aCurrentRNegative)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesNumber := []byte(faker.Number().Number(3))
		this.RBytesNumber = append(this.RBytesNumber, aCurrentRBytesNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesDecimal := []byte(faker.Number().Decimal(5, 2))
		this.RBytesDecimal = append(this.RBytesDecimal, aCurrentRBytesDecimal)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesDigit := []byte(faker.Number().Digit())
		this.RBytesDigit = append(this.RBytesDigit, aCurrentRBytesDigit)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesHexadecimal := []byte(faker.Number().Hexadecimal(3))
		this.RBytesHexadecimal = append(this.RBytesHexadecimal, aCurrentRBytesHexadecimal)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesBetween := []byte(faker.Number().Between(17, 99))
		this.RBytesBetween = append(this.RBytesBetween, aCurrentRBytesBetween)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesPositive := []byte(faker.Number().Positive(100))
		this.RBytesPositive = append(this.RBytesPositive, aCurrentRBytesPositive)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesNegative := []byte(faker.Number().Negative(-100))
		this.RBytesNegative = append(this.RBytesNegative, aCurrentRBytesNegative)
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Number(3), 32); err == nil {
			this.RFloatNumber = append(this.RFloatNumber, float32(v))
		}
		// this.RFloatNumber = append(this.RFloatNumber, aCurrentRFloatNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Decimal(5, 2), 32); err == nil {
			this.RFloatDecimal = append(this.RFloatDecimal, float32(v))
		}
		// this.RFloatDecimal = append(this.RFloatDecimal, aCurrentRFloatDecimal) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Digit(), 32); err == nil {
			this.RFloatDigit = append(this.RFloatDigit, float32(v))
		}
		// this.RFloatDigit = append(this.RFloatDigit, aCurrentRFloatDigit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Between(17, 99), 32); err == nil {
			this.RFloatBetween = append(this.RFloatBetween, float32(v))
		}
		// this.RFloatBetween = append(this.RFloatBetween, aCurrentRFloatBetween) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Positive(100), 32); err == nil {
			this.RFloatPositive = append(this.RFloatPositive, float32(v))
		}
		// this.RFloatPositive = append(this.RFloatPositive, aCurrentRFloatPositive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Negative(-100), 32); err == nil {
			this.RFloatNegative = append(this.RFloatNegative, float32(v))
		}
		// this.RFloatNegative = append(this.RFloatNegative, aCurrentRFloatNegative) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Number(3), 64); err == nil {
			this.RDoubleNumber = append(this.RDoubleNumber, float64(v))
		}
		// this.RDoubleNumber = append(this.RDoubleNumber, aCurrentRDoubleNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Decimal(5, 2), 64); err == nil {
			this.RDoubleDecimal = append(this.RDoubleDecimal, float64(v))
		}
		// this.RDoubleDecimal = append(this.RDoubleDecimal, aCurrentRDoubleDecimal) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Digit(), 64); err == nil {
			this.RDoubleDigit = append(this.RDoubleDigit, float64(v))
		}
		// this.RDoubleDigit = append(this.RDoubleDigit, aCurrentRDoubleDigit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Between(17, 99), 64); err == nil {
			this.RDoubleBetween = append(this.RDoubleBetween, float64(v))
		}
		// this.RDoubleBetween = append(this.RDoubleBetween, aCurrentRDoubleBetween) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Positive(100), 64); err == nil {
			this.RDoublePositive = append(this.RDoublePositive, float64(v))
		}
		// this.RDoublePositive = append(this.RDoublePositive, aCurrentRDoublePositive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.Number().Negative(-100), 64); err == nil {
			this.RDoubleNegative = append(this.RDoubleNegative, float64(v))
		}
		// this.RDoubleNegative = append(this.RDoubleNegative, aCurrentRDoubleNegative) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
			this.RInt32Number = append(this.RInt32Number, int32(v))
		}
		// this.RInt32Number = append(this.RInt32Number, aCurrentRInt32Number) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 32); err == nil {
			this.RInt32Digit = append(this.RInt32Digit, int32(v))
		}
		// this.RInt32Digit = append(this.RInt32Digit, aCurrentRInt32Digit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 32); err == nil {
			this.RInt32Between = append(this.RInt32Between, int32(v))
		}
		// this.RInt32Between = append(this.RInt32Between, aCurrentRInt32Between) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 32); err == nil {
			this.RInt32Positive = append(this.RInt32Positive, int32(v))
		}
		// this.RInt32Positive = append(this.RInt32Positive, aCurrentRInt32Positive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 32); err == nil {
			this.RInt32Negative = append(this.RInt32Negative, int32(v))
		}
		// this.RInt32Negative = append(this.RInt32Negative, aCurrentRInt32Negative) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 32); err == nil {
			this.RUint32Number = append(this.RUint32Number, uint32(v))
		}
		// this.RUint32Number = append(this.RUint32Number, aCurrentRUint32Number) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Digit(), 10, 32); err == nil {
			this.RUint32Digit = append(this.RUint32Digit, uint32(v))
		}
		// this.RUint32Digit = append(this.RUint32Digit, aCurrentRUint32Digit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Between(17, 99), 10, 32); err == nil {
			this.RUint32Between = append(this.RUint32Between, uint32(v))
		}
		// this.RUint32Between = append(this.RUint32Between, aCurrentRUint32Between) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Positive(100), 10, 32); err == nil {
			this.RUint32Positive = append(this.RUint32Positive, uint32(v))
		}
		// this.RUint32Positive = append(this.RUint32Positive, aCurrentRUint32Positive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
			this.RInt64Number = append(this.RInt64Number, int64(v))
		}
		// this.RInt64Number = append(this.RInt64Number, aCurrentRInt64Number) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 64); err == nil {
			this.RInt64Digit = append(this.RInt64Digit, int64(v))
		}
		// this.RInt64Digit = append(this.RInt64Digit, aCurrentRInt64Digit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 64); err == nil {
			this.RInt64Between = append(this.RInt64Between, int64(v))
		}
		// this.RInt64Between = append(this.RInt64Between, aCurrentRInt64Between) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 64); err == nil {
			this.RInt64Positive = append(this.RInt64Positive, int64(v))
		}
		// this.RInt64Positive = append(this.RInt64Positive, aCurrentRInt64Positive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 64); err == nil {
			this.RInt64Negative = append(this.RInt64Negative, int64(v))
		}
		// this.RInt64Negative = append(this.RInt64Negative, aCurrentRInt64Negative) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 64); err == nil {
			this.RUint64Number = append(this.RUint64Number, uint64(v))
		}
		// this.RUint64Number = append(this.RUint64Number, aCurrentRUint64Number) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Digit(), 10, 64); err == nil {
			this.RUint64Digit = append(this.RUint64Digit, uint64(v))
		}
		// this.RUint64Digit = append(this.RUint64Digit, aCurrentRUint64Digit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Between(17, 99), 10, 64); err == nil {
			this.RUint64Between = append(this.RUint64Between, uint64(v))
		}
		// this.RUint64Between = append(this.RUint64Between, aCurrentRUint64Between) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Positive(100), 10, 64); err == nil {
			this.RUint64Positive = append(this.RUint64Positive, uint64(v))
		}
		// this.RUint64Positive = append(this.RUint64Positive, aCurrentRUint64Positive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
			this.RSint32Number = append(this.RSint32Number, int32(v))
		}
		// this.RSint32Number = append(this.RSint32Number, aCurrentRSint32Number) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 32); err == nil {
			this.RSint32Digit = append(this.RSint32Digit, int32(v))
		}
		// this.RSint32Digit = append(this.RSint32Digit, aCurrentRSint32Digit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 32); err == nil {
			this.RSint32Between = append(this.RSint32Between, int32(v))
		}
		// this.RSint32Between = append(this.RSint32Between, aCurrentRSint32Between) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 32); err == nil {
			this.RSint32Positive = append(this.RSint32Positive, int32(v))
		}
		// this.RSint32Positive = append(this.RSint32Positive, aCurrentRSint32Positive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 32); err == nil {
			this.RSint32Negative = append(this.RSint32Negative, int32(v))
		}
		// this.RSint32Negative = append(this.RSint32Negative, aCurrentRSint32Negative) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
			this.RSint64Number = append(this.RSint64Number, int64(v))
		}
		// this.RSint64Number = append(this.RSint64Number, aCurrentRSint64Number) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 64); err == nil {
			this.RSint64Digit = append(this.RSint64Digit, int64(v))
		}
		// this.RSint64Digit = append(this.RSint64Digit, aCurrentRSint64Digit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 64); err == nil {
			this.RSint64Between = append(this.RSint64Between, int64(v))
		}
		// this.RSint64Between = append(this.RSint64Between, aCurrentRSint64Between) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 64); err == nil {
			this.RSint64Positive = append(this.RSint64Positive, int64(v))
		}
		// this.RSint64Positive = append(this.RSint64Positive, aCurrentRSint64Positive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 64); err == nil {
			this.RSint64Negative = append(this.RSint64Negative, int64(v))
		}
		// this.RSint64Negative = append(this.RSint64Negative, aCurrentRSint64Negative) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 32); err == nil {
			this.RFixed32Number = append(this.RFixed32Number, uint32(v))
		}
		// this.RFixed32Number = append(this.RFixed32Number, aCurrentRFixed32Number) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Digit(), 10, 32); err == nil {
			this.RFixed32Digit = append(this.RFixed32Digit, uint32(v))
		}
		// this.RFixed32Digit = append(this.RFixed32Digit, aCurrentRFixed32Digit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Between(17, 99), 10, 32); err == nil {
			this.RFixed32Between = append(this.RFixed32Between, uint32(v))
		}
		// this.RFixed32Between = append(this.RFixed32Between, aCurrentRFixed32Between) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Positive(100), 10, 32); err == nil {
			this.RFixed32Positive = append(this.RFixed32Positive, uint32(v))
		}
		// this.RFixed32Positive = append(this.RFixed32Positive, aCurrentRFixed32Positive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Number(3), 10, 64); err == nil {
			this.RFixed64Number = append(this.RFixed64Number, uint64(v))
		}
		// this.RFixed64Number = append(this.RFixed64Number, aCurrentRFixed64Number) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Digit(), 10, 64); err == nil {
			this.RFixed64Digit = append(this.RFixed64Digit, uint64(v))
		}
		// this.RFixed64Digit = append(this.RFixed64Digit, aCurrentRFixed64Digit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Between(17, 99), 10, 64); err == nil {
			this.RFixed64Between = append(this.RFixed64Between, uint64(v))
		}
		// this.RFixed64Between = append(this.RFixed64Between, aCurrentRFixed64Between) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.Number().Positive(100), 10, 64); err == nil {
			this.RFixed64Positive = append(this.RFixed64Positive, uint64(v))
		}
		// this.RFixed64Positive = append(this.RFixed64Positive, aCurrentRFixed64Positive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 32); err == nil {
			this.RSfixed32Number = append(this.RSfixed32Number, int32(v))
		}
		// this.RSfixed32Number = append(this.RSfixed32Number, aCurrentRSfixed32Number) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 32); err == nil {
			this.RSfixed32Digit = append(this.RSfixed32Digit, int32(v))
		}
		// this.RSfixed32Digit = append(this.RSfixed32Digit, aCurrentRSfixed32Digit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 32); err == nil {
			this.RSfixed32Between = append(this.RSfixed32Between, int32(v))
		}
		// this.RSfixed32Between = append(this.RSfixed32Between, aCurrentRSfixed32Between) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 32); err == nil {
			this.RSfixed32Positive = append(this.RSfixed32Positive, int32(v))
		}
		// this.RSfixed32Positive = append(this.RSfixed32Positive, aCurrentRSfixed32Positive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 32); err == nil {
			this.RSfixed32Negative = append(this.RSfixed32Negative, int32(v))
		}
		// this.RSfixed32Negative = append(this.RSfixed32Negative, aCurrentRSfixed32Negative) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Number(3), 10, 64); err == nil {
			this.RSfixed64Number = append(this.RSfixed64Number, int64(v))
		}
		// this.RSfixed64Number = append(this.RSfixed64Number, aCurrentRSfixed64Number) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Digit(), 10, 64); err == nil {
			this.RSfixed64Digit = append(this.RSfixed64Digit, int64(v))
		}
		// this.RSfixed64Digit = append(this.RSfixed64Digit, aCurrentRSfixed64Digit) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Between(17, 99), 10, 64); err == nil {
			this.RSfixed64Between = append(this.RSfixed64Between, int64(v))
		}
		// this.RSfixed64Between = append(this.RSfixed64Between, aCurrentRSfixed64Between) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Positive(100), 10, 64); err == nil {
			this.RSfixed64Positive = append(this.RSfixed64Positive, int64(v))
		}
		// this.RSfixed64Positive = append(this.RSfixed64Positive, aCurrentRSfixed64Positive) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.Number().Negative(-100), 10, 64); err == nil {
			this.RSfixed64Negative = append(this.RSfixed64Negative, int64(v))
		}
		// this.RSfixed64Negative = append(this.RSfixed64Negative, aCurrentRSfixed64Negative) // skipped
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Number := faker.Number().Number(3)
		this.R2Number = append(this.R2Number, aCurrentR2Number)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Decimal := faker.Number().Decimal(5, 2)
		this.R2Decimal = append(this.R2Decimal, aCurrentR2Decimal)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Digit := faker.Number().Digit()
		this.R2Digit = append(this.R2Digit, aCurrentR2Digit)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Hexadecimal := faker.Number().Hexadecimal(3)
		this.R2Hexadecimal = append(this.R2Hexadecimal, aCurrentR2Hexadecimal)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Between := faker.Number().Between(17, 99)
		this.R2Between = append(this.R2Between, aCurrentR2Between)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Positive := faker.Number().Positive(10)
		this.R2Positive = append(this.R2Positive, aCurrentR2Positive)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Negative := faker.Number().Negative(-10)
		this.R2Negative = append(this.R2Negative, aCurrentR2Negative)
	}
	return this
}

func NewPhoneNumberMessageGomeetFaker() *PhoneNumberMessage {
	this := &PhoneNumberMessage{}
	this.PhoneNumber = faker.PhoneNumber().PhoneNumber()
	this.CellPhone = faker.PhoneNumber().CellPhone()
	this.AreaCode = faker.PhoneNumber().AreaCode()
	this.ExchangeCode = faker.PhoneNumber().ExchangeCode()
	this.SubscriberNumber = faker.PhoneNumber().SubscriberNumber(4)
	this.String_ = faker.PhoneNumber().String()
	this.BytesPhoneNumber = []byte(faker.PhoneNumber().PhoneNumber())
	this.BytesCellPhone = []byte(faker.PhoneNumber().CellPhone())
	this.BytesAreaCode = []byte(faker.PhoneNumber().AreaCode())
	this.BytesExchangeCode = []byte(faker.PhoneNumber().ExchangeCode())
	this.BytesSubscriberNumber = []byte(faker.PhoneNumber().SubscriberNumber(4))
	this.BytesString = []byte(faker.PhoneNumber().String())
	if v, err := strconv.ParseFloat(faker.PhoneNumber().SubscriberNumber(4), 64); err == nil {
		this.DoubleSubscriberNumber = float64(v)
	}
	if v, err := strconv.ParseFloat(faker.PhoneNumber().SubscriberNumber(4), 32); err == nil {
		this.FloatSubscriberNumber = float32(v)
	}
	if v, err := strconv.ParseInt(faker.PhoneNumber().SubscriberNumber(4), 10, 32); err == nil {
		this.Int32SubscriberNumber = int32(v)
	}
	if v, err := strconv.ParseInt(faker.PhoneNumber().SubscriberNumber(4), 10, 64); err == nil {
		this.Int64SubscriberNumber = int64(v)
	}
	if v, err := strconv.ParseUint(faker.PhoneNumber().SubscriberNumber(4), 10, 32); err == nil {
		this.Uint32SubscriberNumber = uint32(v)
	}
	if v, err := strconv.ParseUint(faker.PhoneNumber().SubscriberNumber(4), 10, 64); err == nil {
		this.Uint64SubscriberNumber = uint64(v)
	}
	if v, err := strconv.ParseUint(faker.PhoneNumber().SubscriberNumber(4), 10, 32); err == nil {
		this.Fixed32SubscriberNumber = uint32(v)
	}
	if v, err := strconv.ParseUint(faker.PhoneNumber().SubscriberNumber(4), 10, 64); err == nil {
		this.Fixed64SubscriberNumber = uint64(v)
	}
	if v, err := strconv.ParseInt(faker.PhoneNumber().SubscriberNumber(4), 10, 32); err == nil {
		this.Sfixed32SubscriberNumber = int32(v)
	}
	if v, err := strconv.ParseInt(faker.PhoneNumber().SubscriberNumber(4), 10, 64); err == nil {
		this.Sfixed64SubscriberNumber = int64(v)
	}
	for i := 0; i < 3; i++ {
		aCurrentRPhoneNumber := faker.PhoneNumber().PhoneNumber()
		this.RPhoneNumber = append(this.RPhoneNumber, aCurrentRPhoneNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRCellPhone := faker.PhoneNumber().CellPhone()
		this.RCellPhone = append(this.RCellPhone, aCurrentRCellPhone)
	}
	for i := 0; i < 3; i++ {
		aCurrentRAreaCode := faker.PhoneNumber().AreaCode()
		this.RAreaCode = append(this.RAreaCode, aCurrentRAreaCode)
	}
	for i := 0; i < 3; i++ {
		aCurrentRExchangeCode := faker.PhoneNumber().ExchangeCode()
		this.RExchangeCode = append(this.RExchangeCode, aCurrentRExchangeCode)
	}
	for i := 0; i < 3; i++ {
		aCurrentRSubscriberNumber := faker.PhoneNumber().SubscriberNumber(4)
		this.RSubscriberNumber = append(this.RSubscriberNumber, aCurrentRSubscriberNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRString := faker.PhoneNumber().String()
		this.RString = append(this.RString, aCurrentRString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesPhoneNumber := []byte(faker.PhoneNumber().PhoneNumber())
		this.RBytesPhoneNumber = append(this.RBytesPhoneNumber, aCurrentRBytesPhoneNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCellPhone := []byte(faker.PhoneNumber().CellPhone())
		this.RBytesCellPhone = append(this.RBytesCellPhone, aCurrentRBytesCellPhone)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesAreaCode := []byte(faker.PhoneNumber().AreaCode())
		this.RBytesAreaCode = append(this.RBytesAreaCode, aCurrentRBytesAreaCode)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesExchangeCode := []byte(faker.PhoneNumber().ExchangeCode())
		this.RBytesExchangeCode = append(this.RBytesExchangeCode, aCurrentRBytesExchangeCode)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesSubscriberNumber := []byte(faker.PhoneNumber().SubscriberNumber(4))
		this.RBytesSubscriberNumber = append(this.RBytesSubscriberNumber, aCurrentRBytesSubscriberNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesString := []byte(faker.PhoneNumber().String())
		this.RBytesString = append(this.RBytesString, aCurrentRBytesString)
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.PhoneNumber().SubscriberNumber(4), 64); err == nil {
			this.RDoubleSubscriberNumber = append(this.RDoubleSubscriberNumber, float64(v))
		}
		// this.RDoubleSubscriberNumber = append(this.RDoubleSubscriberNumber, aCurrentRDoubleSubscriberNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseFloat(faker.PhoneNumber().SubscriberNumber(4), 32); err == nil {
			this.RFloatSubscriberNumber = append(this.RFloatSubscriberNumber, float32(v))
		}
		// this.RFloatSubscriberNumber = append(this.RFloatSubscriberNumber, aCurrentRFloatSubscriberNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.PhoneNumber().SubscriberNumber(4), 10, 32); err == nil {
			this.RInt32SubscriberNumber = append(this.RInt32SubscriberNumber, int32(v))
		}
		// this.RInt32SubscriberNumber = append(this.RInt32SubscriberNumber, aCurrentRInt32SubscriberNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.PhoneNumber().SubscriberNumber(4), 10, 64); err == nil {
			this.RInt64SubscriberNumber = append(this.RInt64SubscriberNumber, int64(v))
		}
		// this.RInt64SubscriberNumber = append(this.RInt64SubscriberNumber, aCurrentRInt64SubscriberNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.PhoneNumber().SubscriberNumber(4), 10, 32); err == nil {
			this.RUint32SubscriberNumber = append(this.RUint32SubscriberNumber, uint32(v))
		}
		// this.RUint32SubscriberNumber = append(this.RUint32SubscriberNumber, aCurrentRUint32SubscriberNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.PhoneNumber().SubscriberNumber(4), 10, 64); err == nil {
			this.RUint64SubscriberNumber = append(this.RUint64SubscriberNumber, uint64(v))
		}
		// this.RUint64SubscriberNumber = append(this.RUint64SubscriberNumber, aCurrentRUint64SubscriberNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.PhoneNumber().SubscriberNumber(4), 10, 32); err == nil {
			this.RFixed32SubscriberNumber = append(this.RFixed32SubscriberNumber, uint32(v))
		}
		// this.RFixed32SubscriberNumber = append(this.RFixed32SubscriberNumber, aCurrentRFixed32SubscriberNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseUint(faker.PhoneNumber().SubscriberNumber(4), 10, 64); err == nil {
			this.RFixed64SubscriberNumber = append(this.RFixed64SubscriberNumber, uint64(v))
		}
		// this.RFixed64SubscriberNumber = append(this.RFixed64SubscriberNumber, aCurrentRFixed64SubscriberNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.PhoneNumber().SubscriberNumber(4), 10, 32); err == nil {
			this.RSfixed32SubscriberNumber = append(this.RSfixed32SubscriberNumber, int32(v))
		}
		// this.RSfixed32SubscriberNumber = append(this.RSfixed32SubscriberNumber, aCurrentRSfixed32SubscriberNumber) // skipped
	}
	for i := 0; i < 3; i++ {
		if v, err := strconv.ParseInt(faker.PhoneNumber().SubscriberNumber(4), 10, 64); err == nil {
			this.RSfixed64SubscriberNumber = append(this.RSfixed64SubscriberNumber, int64(v))
		}
		// this.RSfixed64SubscriberNumber = append(this.RSfixed64SubscriberNumber, aCurrentRSfixed64SubscriberNumber) // skipped
	}
	for i := 0; i < 5; i++ {
		aCurrentR2PhoneNumber := faker.PhoneNumber().PhoneNumber()
		this.R2PhoneNumber = append(this.R2PhoneNumber, aCurrentR2PhoneNumber)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2CellPhone := faker.PhoneNumber().CellPhone()
		this.R2CellPhone = append(this.R2CellPhone, aCurrentR2CellPhone)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2AreaCode := faker.PhoneNumber().AreaCode()
		this.R2AreaCode = append(this.R2AreaCode, aCurrentR2AreaCode)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2ExchangeCode := faker.PhoneNumber().ExchangeCode()
		this.R2ExchangeCode = append(this.R2ExchangeCode, aCurrentR2ExchangeCode)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2SubscriberNumber := faker.PhoneNumber().SubscriberNumber(2)
		this.R2SubscriberNumber = append(this.R2SubscriberNumber, aCurrentR2SubscriberNumber)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2String := faker.PhoneNumber().String()
		this.R2String = append(this.R2String, aCurrentR2String)
	}
	return this
}

func NewTeamMessageGomeetFaker() *TeamMessage {
	this := &TeamMessage{}
	this.Name = faker.Team().Name()
	this.Creature = faker.Team().Creature()
	this.State = faker.Team().State()
	this.String_ = faker.Team().String()
	this.BytesName = []byte(faker.Team().Name())
	this.BytesCreature = []byte(faker.Team().Creature())
	this.BytesState = []byte(faker.Team().State())
	this.BytesString = []byte(faker.Team().String())
	for i := 0; i < 3; i++ {
		aCurrentRName := faker.Team().Name()
		this.RName = append(this.RName, aCurrentRName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRCreature := faker.Team().Creature()
		this.RCreature = append(this.RCreature, aCurrentRCreature)
	}
	for i := 0; i < 3; i++ {
		aCurrentRState := faker.Team().State()
		this.RState = append(this.RState, aCurrentRState)
	}
	for i := 0; i < 3; i++ {
		aCurrentRString := faker.Team().String()
		this.RString = append(this.RString, aCurrentRString)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesName := []byte(faker.Team().Name())
		this.RBytesName = append(this.RBytesName, aCurrentRBytesName)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesCreature := []byte(faker.Team().Creature())
		this.RBytesCreature = append(this.RBytesCreature, aCurrentRBytesCreature)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesState := []byte(faker.Team().State())
		this.RBytesState = append(this.RBytesState, aCurrentRBytesState)
	}
	for i := 0; i < 3; i++ {
		aCurrentRBytesString := []byte(faker.Team().String())
		this.RBytesString = append(this.RBytesString, aCurrentRBytesString)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Name := faker.Team().Name()
		this.R2Name = append(this.R2Name, aCurrentR2Name)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2Creature := faker.Team().Creature()
		this.R2Creature = append(this.R2Creature, aCurrentR2Creature)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2State := faker.Team().State()
		this.R2State = append(this.R2State, aCurrentR2State)
	}
	for i := 0; i < 5; i++ {
		aCurrentR2String := faker.Team().String()
		this.R2String = append(this.R2String, aCurrentR2String)
	}
	return this
}

func NewTimeMessageGomeetFaker() *TimeMessage {
	this := &TimeMessage{}
	if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
		if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Time().Between(t1, t2)); err == nil {
				this.Between = t
			}
		}
	}
	if aForwardDuration, err := time.ParseDuration("240h"); err == nil {
		if t, err := ptypes.TimestampProto(faker.Time().Forward(aForwardDuration)); err == nil {
			this.Forward = t
		}
	}
	if aBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		if t, err := ptypes.TimestampProto(faker.Time().Backward(aBackwardDuration)); err == nil {
			this.Backward = t
		}
	}
	if t, err := ptypes.TimestampProto(faker.Time().Birthday(17, 99)); err == nil {
		this.Birthday = t
	}
	if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
		if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
			aStringBetweenTime := faker.Time().Between(t1, t2)
			this.StringBetween = aStringBetweenTime.Format("2006-01-02 15:04:05")
		}
	}
	if aStringForwardDuration, err := time.ParseDuration("240h"); err == nil {
		aStringForwardTime := faker.Time().Forward(aStringForwardDuration)
		this.StringForward = aStringForwardTime.Format("2006-01-02 15:04:05")
	}
	if aStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aStringBackwardTime := faker.Time().Backward(aStringBackwardDuration)
		this.StringBackward = aStringBackwardTime.Format("2006-01-02 15:04:05")
	}
	aStringBirthdayTime := faker.Time().Birthday(17, 99)
	this.StringBirthday = aStringBirthdayTime.Format("2006-01-02")
	if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
		if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
			aBytesBetweenTime := faker.Time().Between(t1, t2)
			this.BytesBetween = []byte(aBytesBetweenTime.Format("2006-01-02 15:04:05"))
		}
	}
	if aBytesForwardDuration, err := time.ParseDuration("240h"); err == nil {
		aBytesForwardTime := faker.Time().Forward(aBytesForwardDuration)
		this.BytesForward = []byte(aBytesForwardTime.Format("2006-01-02 15:04:05"))
	}
	if aBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aBytesBackwardTime := faker.Time().Backward(aBytesBackwardDuration)
		this.BytesBackward = []byte(aBytesBackwardTime.Format("2006-01-02 15:04:05"))
	}
	aBytesBirthdayTime := faker.Time().Birthday(17, 99)
	this.BytesBirthday = []byte(aBytesBirthdayTime.Format("2006-01-02"))
	if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
		if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
			aFStringBetweenTime := faker.Time().Between(t1, t2)
			this.FStringBetween = aFStringBetweenTime.Format("2006-01-02 15:04:05")
		}
	}
	if aFStringForwardDuration, err := time.ParseDuration("240h"); err == nil {
		aFStringForwardTime := faker.Time().Forward(aFStringForwardDuration)
		this.FStringForward = aFStringForwardTime.Format("2006-01-02")
	}
	if aFStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aFStringBackwardTime := faker.Time().Backward(aFStringBackwardDuration)
		this.FStringBackward = aFStringBackwardTime.Format("2006-01-02")
	}
	aFStringBirthdayTime := faker.Time().Birthday(17, 99)
	this.FStringBirthday = aFStringBirthdayTime.Format("2006-01-02")
	if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
		if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
			aFBytesBetweenTime := faker.Time().Between(t1, t2)
			this.FBytesBetween = []byte(aFBytesBetweenTime.Format("2006-01-02 15:04:05"))
		}
	}
	if aFBytesForwardDuration, err := time.ParseDuration("240h"); err == nil {
		aFBytesForwardTime := faker.Time().Forward(aFBytesForwardDuration)
		this.FBytesForward = []byte(aFBytesForwardTime.Format("2006-01-02"))
	}
	if aFBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
		aFBytesBackwardTime := faker.Time().Backward(aFBytesBackwardDuration)
		this.FBytesBackward = []byte(aFBytesBackwardTime.Format("2006-01-02"))
	}
	aFBytesBirthdayTime := faker.Time().Birthday(17, 99)
	this.FBytesBirthday = []byte(aFBytesBirthdayTime.Format("2006-01-02"))
	// EStringForward  =  faker.Time().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	// EStringBackward  =  faker.Time().Backward(...) // bad duration time.ParseDuration("-240h") < 0
	// EBytesForward  =  faker.Time().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	// EBytesBackward  =  faker.Time().Backward(...) // bad duration time.ParseDuration("-240h") < 0
	// EFStringForward  =  faker.Time().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	// EFStringBackward  =  faker.Time().Backward(...) // bad duration time.ParseDuration("-240h") < 0
	// EFBytesForward  =  faker.Time().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	// EFBytesBackward  =  faker.Time().Backward(...) // bad duration time.ParseDuration("-240h") < 0
	for i := 0; i < 3; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				if t, err := ptypes.TimestampProto(faker.Time().Between(t1, t2)); err == nil {
					this.RBetween = append(this.RBetween, t)
				}
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRForwardDuration, err := time.ParseDuration("240h"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Time().Forward(aRForwardDuration)); err == nil {
				this.RForward = append(this.RForward, t)
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Time().Backward(aRBackwardDuration)); err == nil {
				this.RBackward = append(this.RBackward, t)
			}
		}
	}
	for i := 0; i < 3; i++ {
		if t, err := ptypes.TimestampProto(faker.Time().Birthday(17, 99)); err == nil {
			this.RBirthday = append(this.RBirthday, t)
		}
	}
	for i := 0; i < 3; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				aRStringBetweenTime := faker.Time().Between(t1, t2)
				this.RStringBetween = append(this.RStringBetween, aRStringBetweenTime.Format("2006-01-02 15:04:05"))
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRStringForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRStringForwardTime := faker.Time().Forward(aRStringForwardDuration)
			this.RStringForward = append(this.RStringForward, aRStringForwardTime.Format("2006-01-02 15:04:05"))
		}
	}
	for i := 0; i < 3; i++ {
		if aRStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRStringBackwardTime := faker.Time().Backward(aRStringBackwardDuration)
			this.RStringBackward = append(this.RStringBackward, aRStringBackwardTime.Format("2006-01-02 15:04:05"))
		}
	}
	for i := 0; i < 3; i++ {
		aRStringBirthdayTime := faker.Time().Birthday(17, 99)
		this.RStringBirthday = append(this.RStringBirthday, aRStringBirthdayTime.Format("2006-01-02"))
	}
	for i := 0; i < 3; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				aRBytesBetweenTime := faker.Time().Between(t1, t2)
				this.RBytesBetween = append(this.RBytesBetween, []byte(aRBytesBetweenTime.Format("2006-01-02 15:04:05")))
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRBytesForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRBytesForwardTime := faker.Time().Forward(aRBytesForwardDuration)
			this.RBytesForward = append(this.RBytesForward, []byte(aRBytesForwardTime.Format("2006-01-02 15:04:05")))
		}
	}
	for i := 0; i < 3; i++ {
		if aRBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRBytesBackwardTime := faker.Time().Backward(aRBytesBackwardDuration)
			this.RBytesBackward = append(this.RBytesBackward, []byte(aRBytesBackwardTime.Format("2006-01-02 15:04:05")))
		}
	}
	for i := 0; i < 3; i++ {
		aRBytesBirthdayTime := faker.Time().Birthday(17, 99)
		this.RBytesBirthday = append(this.RBytesBirthday, []byte(aRBytesBirthdayTime.Format("2006-01-02")))
	}
	for i := 0; i < 3; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				aRFStringBetweenTime := faker.Time().Between(t1, t2)
				this.RFStringBetween = append(this.RFStringBetween, aRFStringBetweenTime.Format("2006-01-02 15:04:05"))
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRFStringForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRFStringForwardTime := faker.Time().Forward(aRFStringForwardDuration)
			this.RFStringForward = append(this.RFStringForward, aRFStringForwardTime.Format("2006-01-02"))
		}
	}
	for i := 0; i < 3; i++ {
		if aRFStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRFStringBackwardTime := faker.Time().Backward(aRFStringBackwardDuration)
			this.RFStringBackward = append(this.RFStringBackward, aRFStringBackwardTime.Format("2006-01-02"))
		}
	}
	for i := 0; i < 3; i++ {
		aRFStringBirthdayTime := faker.Time().Birthday(17, 99)
		this.RFStringBirthday = append(this.RFStringBirthday, aRFStringBirthdayTime.Format("2006-01-02"))
	}
	for i := 0; i < 3; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				aRFBytesBetweenTime := faker.Time().Between(t1, t2)
				this.RFBytesBetween = append(this.RFBytesBetween, []byte(aRFBytesBetweenTime.Format("2006-01-02 15:04:05")))
			}
		}
	}
	for i := 0; i < 3; i++ {
		if aRFBytesForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRFBytesForwardTime := faker.Time().Forward(aRFBytesForwardDuration)
			this.RFBytesForward = append(this.RFBytesForward, []byte(aRFBytesForwardTime.Format("2006-01-02")))
		}
	}
	for i := 0; i < 3; i++ {
		if aRFBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aRFBytesBackwardTime := faker.Time().Backward(aRFBytesBackwardDuration)
			this.RFBytesBackward = append(this.RFBytesBackward, []byte(aRFBytesBackwardTime.Format("2006-01-02")))
		}
	}
	for i := 0; i < 3; i++ {
		aRFBytesBirthdayTime := faker.Time().Birthday(17, 99)
		this.RFBytesBirthday = append(this.RFBytesBirthday, []byte(aRFBytesBirthdayTime.Format("2006-01-02")))
	}
	for i := 0; i < 3; i++ {
		// REStringForward  :=  faker.Time().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		if aREStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aREStringBackwardTime := faker.Time().Backward(aREStringBackwardDuration)
			this.REStringBackward = append(this.REStringBackward, aREStringBackwardTime.Format("2006-01-02 15:04:05"))
		}
	}
	for i := 0; i < 3; i++ {
		// REBytesForward  :=  faker.Time().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		if aREBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aREBytesBackwardTime := faker.Time().Backward(aREBytesBackwardDuration)
			this.REBytesBackward = append(this.REBytesBackward, []byte(aREBytesBackwardTime.Format("2006-01-02 15:04:05")))
		}
	}
	for i := 0; i < 3; i++ {
		// REFStringForward  :=  faker.Time().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		if aREFStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aREFStringBackwardTime := faker.Time().Backward(aREFStringBackwardDuration)
			this.REFStringBackward = append(this.REFStringBackward, aREFStringBackwardTime.Format("2006-01-02"))
		}
	}
	for i := 0; i < 3; i++ {
		// REFBytesForward  :=  faker.Time().Forward(...) // bad duration time.ParseDuration("-240h") < 0
	}
	for i := 0; i < 3; i++ {
		if aREFBytesBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aREFBytesBackwardTime := faker.Time().Backward(aREFBytesBackwardDuration)
			this.REFBytesBackward = append(this.REFBytesBackward, []byte(aREFBytesBackwardTime.Format("2006-01-02")))
		}
	}
	for i := 0; i < 5; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				if t, err := ptypes.TimestampProto(faker.Time().Between(t1, t2)); err == nil {
					this.R2Between = append(this.R2Between, t)
				}
			}
		}
	}
	for i := 0; i < 5; i++ {
		if aR2ForwardDuration, err := time.ParseDuration("240h"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Time().Forward(aR2ForwardDuration)); err == nil {
				this.R2Forward = append(this.R2Forward, t)
			}
		}
	}
	for i := 0; i < 5; i++ {
		if aR2BackwardDuration, err := time.ParseDuration("240h"); err == nil {
			if t, err := ptypes.TimestampProto(faker.Time().Backward(aR2BackwardDuration)); err == nil {
				this.R2Backward = append(this.R2Backward, t)
			}
		}
	}
	for i := 0; i < 5; i++ {
		if t, err := ptypes.TimestampProto(faker.Time().Birthday(17, 99)); err == nil {
			this.R2Birthday = append(this.R2Birthday, t)
		}
	}
	for i := 0; i < 5; i++ {
		if t1, err := time.Parse("2006-01-02 15:04:05", "1976-12-13 00:00:00"); err == nil {
			if t2, err := time.Parse("2006-01-02 15:04:05", "1980-12-13 00:00:00"); err == nil {
				aR2StringBetweenTime := faker.Time().Between(t1, t2)
				this.R2StringBetween = append(this.R2StringBetween, aR2StringBetweenTime.Format("2006-01-02 15:04:05"))
			}
		}
	}
	for i := 0; i < 5; i++ {
		if aR2StringForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aR2StringForwardTime := faker.Time().Forward(aR2StringForwardDuration)
			this.R2StringForward = append(this.R2StringForward, aR2StringForwardTime.Format("2006-01-02 15:04:05"))
		}
	}
	for i := 0; i < 5; i++ {
		if aR2StringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aR2StringBackwardTime := faker.Time().Backward(aR2StringBackwardDuration)
			this.R2StringBackward = append(this.R2StringBackward, aR2StringBackwardTime.Format("2006-01-02 15:04:05"))
		}
	}
	for i := 0; i < 5; i++ {
		aR2StringBirthdayTime := faker.Time().Birthday(17, 99)
		this.R2StringBirthday = append(this.R2StringBirthday, aR2StringBirthdayTime.Format("2006-01-02"))
	}
	for i := 0; i < 5; i++ {
		// R2FStringBetween  :=  faker.Time().Between(...) // bad type conversion parsing time "1976-12-13 00:00:00": extra text:  00:00:00
	}
	for i := 0; i < 5; i++ {
		if aR2FStringForwardDuration, err := time.ParseDuration("240h"); err == nil {
			aR2FStringForwardTime := faker.Time().Forward(aR2FStringForwardDuration)
			this.R2FStringForward = append(this.R2FStringForward, aR2FStringForwardTime.Format("2006-01-02"))
		}
	}
	for i := 0; i < 5; i++ {
		if aR2FStringBackwardDuration, err := time.ParseDuration("240h"); err == nil {
			aR2FStringBackwardTime := faker.Time().Backward(aR2FStringBackwardDuration)
			this.R2FStringBackward = append(this.R2FStringBackward, aR2FStringBackwardTime.Format("2006-01-02"))
		}
	}
	for i := 0; i < 5; i++ {
		aR2FStringBirthdayTime := faker.Time().Birthday(17, 99)
		this.R2FStringBirthday = append(this.R2FStringBirthday, aR2FStringBirthdayTime.Format("2006-01-02"))
	}
	if t, err := ptypes.TimestampProto(time.Now()); err == nil {
		this.Now = t
	}
	this.StringNow = time.Now().Format("2006-01-02 15:04:05")
	this.BytesNow = []byte(time.Now().Format("2006-01-02 15:04:05"))
	this.FStringNow = time.Now().Format("15:04:05Z07:00")
	this.FBytesNow = []byte(time.Now().Format("15:04:05Z07:00"))
	for i := 0; i < 3; i++ {
		if t, err := ptypes.TimestampProto(time.Now()); err == nil {
			this.RNow = append(this.RNow, t)
		}
	}
	for i := 0; i < 3; i++ {
		this.RStringNow = append(this.RStringNow, time.Now().Format("2006-01-02 15:04:05"))
	}
	for i := 0; i < 3; i++ {
		this.RBytesNow = append(this.RBytesNow, []byte(time.Now().Format("2006-01-02 15:04:05")))
	}
	for i := 0; i < 3; i++ {
		this.RFStringNow = append(this.RFStringNow, time.Now().Format("15:04:05Z07:00"))
	}
	for i := 0; i < 3; i++ {
		this.RFBytesNow = append(this.RFBytesNow, []byte(time.Now().Format("15:04:05Z07:00")))
	}
	for i := 0; i < 5; i++ {
		if t, err := ptypes.TimestampProto(time.Now()); err == nil {
			this.R2Now = append(this.R2Now, t)
		}
	}
	for i := 0; i < 5; i++ {
		this.R2StringNow = append(this.R2StringNow, time.Now().Format("2006-01-02 15:04:05"))
	}
	for i := 0; i < 5; i++ {
		this.R2BytesNow = append(this.R2BytesNow, []byte(time.Now().Format("2006-01-02 15:04:05")))
	}
	for i := 0; i < 5; i++ {
		this.R2FStringNow = append(this.R2FStringNow, time.Now().Format("15:04:05Z07:00"))
	}
	for i := 0; i < 5; i++ {
		this.R2FBytesNow = append(this.R2FBytesNow, []byte(time.Now().Format("15:04:05Z07:00")))
	}
	return this
}

func NewEmbedAllFakerMessageGomeetFaker() *EmbedAllFakerMessage {
	this := &EmbedAllFakerMessage{}
	this.WithoutFaker = NewWithoutFakerMessageGomeetFaker()
	this.Value = NewValueMessageGomeetFaker()
	this.Address = NewAddressMessageGomeetFaker()
	this.App = NewAppMessageGomeetFaker()
	this.Avatar = NewAvatarMessageGomeetFaker()
	this.Bitcoin = NewBitcoinMessageGomeetFaker()
	this.Business = NewBusinessMessageGomeetFaker()
	this.Code = NewCodeMessageGomeetFaker()
	this.Commerce = NewCommerceMessageGomeetFaker()
	this.Company = NewCompanyMessageGomeetFaker()
	this.Date = NewDateMessageGomeetFaker()
	this.Finance = NewFinanceMessageGomeetFaker()
	this.Hacker = NewHackerMessageGomeetFaker()
	this.Internet = NewInternetMessageGomeetFaker()
	this.Lorem = NewLoremMessageGomeetFaker()
	this.Name = NewNameMessageGomeetFaker()
	this.Number = NewNumberMessageGomeetFaker()
	this.PhoneNumber = NewPhoneNumberMessageGomeetFaker()
	this.Team = NewTeamMessageGomeetFaker()
	this.Time = NewTimeMessageGomeetFaker()
	// this.GoogleTimestamp = *google_protobuf1.Timestamp{} // unknow gomeetfaker function name for type : .google.protobuf.Timestamp
	return this
}

func NewEmbedOneOfFakerMessageGomeetFaker() *EmbedOneOfFakerMessage {
	this := &EmbedOneOfFakerMessage{}
	oneofNumber_Message := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}[GomeetFakerRand().Intn(21)]
	switch oneofNumber_Message {
	case 1:
		var aOneOf_Message = NewWithoutFakerMessageGomeetFaker()
		// EmbedOneOfFakerMessage_WithoutFaker
		this.Message = &EmbedOneOfFakerMessage_WithoutFaker{aOneOf_Message}
	case 2:
		var aOneOf_Message = NewValueMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Value
		this.Message = &EmbedOneOfFakerMessage_Value{aOneOf_Message}
	case 3:
		var aOneOf_Message = NewAddressMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Address
		this.Message = &EmbedOneOfFakerMessage_Address{aOneOf_Message}
	case 4:
		var aOneOf_Message = NewAppMessageGomeetFaker()
		// EmbedOneOfFakerMessage_App
		this.Message = &EmbedOneOfFakerMessage_App{aOneOf_Message}
	case 5:
		var aOneOf_Message = NewAvatarMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Avatar
		this.Message = &EmbedOneOfFakerMessage_Avatar{aOneOf_Message}
	case 6:
		var aOneOf_Message = NewBitcoinMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Bitcoin
		this.Message = &EmbedOneOfFakerMessage_Bitcoin{aOneOf_Message}
	case 7:
		var aOneOf_Message = NewBusinessMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Business
		this.Message = &EmbedOneOfFakerMessage_Business{aOneOf_Message}
	case 8:
		var aOneOf_Message = NewCodeMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Code
		this.Message = &EmbedOneOfFakerMessage_Code{aOneOf_Message}
	case 9:
		var aOneOf_Message = NewCommerceMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Commerce
		this.Message = &EmbedOneOfFakerMessage_Commerce{aOneOf_Message}
	case 10:
		var aOneOf_Message = NewCompanyMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Company
		this.Message = &EmbedOneOfFakerMessage_Company{aOneOf_Message}
	case 11:
		var aOneOf_Message = NewDateMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Date
		this.Message = &EmbedOneOfFakerMessage_Date{aOneOf_Message}
	case 12:
		var aOneOf_Message = NewFinanceMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Finance
		this.Message = &EmbedOneOfFakerMessage_Finance{aOneOf_Message}
	case 13:
		var aOneOf_Message = NewHackerMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Hacker
		this.Message = &EmbedOneOfFakerMessage_Hacker{aOneOf_Message}
	case 14:
		var aOneOf_Message = NewInternetMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Internet
		this.Message = &EmbedOneOfFakerMessage_Internet{aOneOf_Message}
	case 15:
		var aOneOf_Message = NewLoremMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Lorem
		this.Message = &EmbedOneOfFakerMessage_Lorem{aOneOf_Message}
	case 16:
		var aOneOf_Message = NewNameMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Name
		this.Message = &EmbedOneOfFakerMessage_Name{aOneOf_Message}
	case 17:
		var aOneOf_Message = NewNumberMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Number
		this.Message = &EmbedOneOfFakerMessage_Number{aOneOf_Message}
	case 18:
		var aOneOf_Message = NewPhoneNumberMessageGomeetFaker()
		// EmbedOneOfFakerMessage_PhoneNumber
		this.Message = &EmbedOneOfFakerMessage_PhoneNumber{aOneOf_Message}
	case 19:
		var aOneOf_Message = NewTeamMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Team
		this.Message = &EmbedOneOfFakerMessage_Team{aOneOf_Message}
	case 20:
		var aOneOf_Message = NewTimeMessageGomeetFaker()
		// EmbedOneOfFakerMessage_Time
		this.Message = &EmbedOneOfFakerMessage_Time{aOneOf_Message}
	case 21:
		// var aOneOf_Message = *google_protobuf1.Timestamp{} // unknow gomeetfaker function name for type : .google.protobuf.Timestamp
		// EmbedOneOfFakerMessage_GoogleTimestamp
		// this.Message = &EmbedOneOfFakerMessage_GoogleTimestamp{aOneOf_Message}
	}
	return this
}

func NewEmbedAllFakerRepeatedMessageGomeetFaker() *EmbedAllFakerRepeatedMessage {
	this := &EmbedAllFakerRepeatedMessage{}
	for i := 0; i < 5; i++ {
		aCurrentWithoutFaker := NewWithoutFakerMessageGomeetFaker()
		this.WithoutFaker = append(this.WithoutFaker, aCurrentWithoutFaker)
	}
	for i := 0; i < 5; i++ {
		aCurrentValue := NewValueMessageGomeetFaker()
		this.Value = append(this.Value, aCurrentValue)
	}
	for i := 0; i < 5; i++ {
		aCurrentAddress := NewAddressMessageGomeetFaker()
		this.Address = append(this.Address, aCurrentAddress)
	}
	for i := 0; i < 5; i++ {
		aCurrentApp := NewAppMessageGomeetFaker()
		this.App = append(this.App, aCurrentApp)
	}
	for i := 0; i < 5; i++ {
		aCurrentAvatar := NewAvatarMessageGomeetFaker()
		this.Avatar = append(this.Avatar, aCurrentAvatar)
	}
	for i := 0; i < 5; i++ {
		aCurrentBitcoin := NewBitcoinMessageGomeetFaker()
		this.Bitcoin = append(this.Bitcoin, aCurrentBitcoin)
	}
	for i := 0; i < 5; i++ {
		aCurrentBusiness := NewBusinessMessageGomeetFaker()
		this.Business = append(this.Business, aCurrentBusiness)
	}
	for i := 0; i < 5; i++ {
		aCurrentCode := NewCodeMessageGomeetFaker()
		this.Code = append(this.Code, aCurrentCode)
	}
	for i := 0; i < 5; i++ {
		aCurrentCommerce := NewCommerceMessageGomeetFaker()
		this.Commerce = append(this.Commerce, aCurrentCommerce)
	}
	for i := 0; i < 5; i++ {
		aCurrentCompany := NewCompanyMessageGomeetFaker()
		this.Company = append(this.Company, aCurrentCompany)
	}
	for i := 0; i < 5; i++ {
		aCurrentDate := NewDateMessageGomeetFaker()
		this.Date = append(this.Date, aCurrentDate)
	}
	for i := 0; i < 5; i++ {
		aCurrentFinance := NewFinanceMessageGomeetFaker()
		this.Finance = append(this.Finance, aCurrentFinance)
	}
	for i := 0; i < 5; i++ {
		aCurrentHacker := NewHackerMessageGomeetFaker()
		this.Hacker = append(this.Hacker, aCurrentHacker)
	}
	for i := 0; i < 5; i++ {
		aCurrentInternet := NewInternetMessageGomeetFaker()
		this.Internet = append(this.Internet, aCurrentInternet)
	}
	for i := 0; i < 5; i++ {
		aCurrentLorem := NewLoremMessageGomeetFaker()
		this.Lorem = append(this.Lorem, aCurrentLorem)
	}
	for i := 0; i < 5; i++ {
		aCurrentName := NewNameMessageGomeetFaker()
		this.Name = append(this.Name, aCurrentName)
	}
	for i := 0; i < 5; i++ {
		aCurrentNumber := NewNumberMessageGomeetFaker()
		this.Number = append(this.Number, aCurrentNumber)
	}
	for i := 0; i < 5; i++ {
		aCurrentPhoneNumber := NewPhoneNumberMessageGomeetFaker()
		this.PhoneNumber = append(this.PhoneNumber, aCurrentPhoneNumber)
	}
	for i := 0; i < 5; i++ {
		aCurrentTeam := NewTeamMessageGomeetFaker()
		this.Team = append(this.Team, aCurrentTeam)
	}
	for i := 0; i < 5; i++ {
		aCurrentTime := NewTimeMessageGomeetFaker()
		this.Time = append(this.Time, aCurrentTime)
	}
	// this.GoogleTimestamp = []*google_protobuf1.Timestamp{} // unknow gomeetfaker function name for type : .google.protobuf.Timestamp
	return this
}

func NewEmbedAllFakerRepeatedNoRulesMessageGomeetFaker() *EmbedAllFakerRepeatedNoRulesMessage {
	this := &EmbedAllFakerRepeatedNoRulesMessage{}
	for i := 0; i < 3; i++ {
		aCurrentWithoutFaker := NewWithoutFakerMessageGomeetFaker()
		this.WithoutFaker = append(this.WithoutFaker, aCurrentWithoutFaker)
	}
	for i := 0; i < 3; i++ {
		aCurrentValue := NewValueMessageGomeetFaker()
		this.Value = append(this.Value, aCurrentValue)
	}
	for i := 0; i < 3; i++ {
		aCurrentAddress := NewAddressMessageGomeetFaker()
		this.Address = append(this.Address, aCurrentAddress)
	}
	for i := 0; i < 3; i++ {
		aCurrentApp := NewAppMessageGomeetFaker()
		this.App = append(this.App, aCurrentApp)
	}
	for i := 0; i < 3; i++ {
		aCurrentAvatar := NewAvatarMessageGomeetFaker()
		this.Avatar = append(this.Avatar, aCurrentAvatar)
	}
	for i := 0; i < 3; i++ {
		aCurrentBitcoin := NewBitcoinMessageGomeetFaker()
		this.Bitcoin = append(this.Bitcoin, aCurrentBitcoin)
	}
	for i := 0; i < 3; i++ {
		aCurrentBusiness := NewBusinessMessageGomeetFaker()
		this.Business = append(this.Business, aCurrentBusiness)
	}
	for i := 0; i < 3; i++ {
		aCurrentCode := NewCodeMessageGomeetFaker()
		this.Code = append(this.Code, aCurrentCode)
	}
	for i := 0; i < 3; i++ {
		aCurrentCommerce := NewCommerceMessageGomeetFaker()
		this.Commerce = append(this.Commerce, aCurrentCommerce)
	}
	for i := 0; i < 3; i++ {
		aCurrentCompany := NewCompanyMessageGomeetFaker()
		this.Company = append(this.Company, aCurrentCompany)
	}
	for i := 0; i < 3; i++ {
		aCurrentDate := NewDateMessageGomeetFaker()
		this.Date = append(this.Date, aCurrentDate)
	}
	for i := 0; i < 3; i++ {
		aCurrentFinance := NewFinanceMessageGomeetFaker()
		this.Finance = append(this.Finance, aCurrentFinance)
	}
	for i := 0; i < 3; i++ {
		aCurrentHacker := NewHackerMessageGomeetFaker()
		this.Hacker = append(this.Hacker, aCurrentHacker)
	}
	for i := 0; i < 3; i++ {
		aCurrentInternet := NewInternetMessageGomeetFaker()
		this.Internet = append(this.Internet, aCurrentInternet)
	}
	for i := 0; i < 3; i++ {
		aCurrentLorem := NewLoremMessageGomeetFaker()
		this.Lorem = append(this.Lorem, aCurrentLorem)
	}
	for i := 0; i < 3; i++ {
		aCurrentName := NewNameMessageGomeetFaker()
		this.Name = append(this.Name, aCurrentName)
	}
	for i := 0; i < 3; i++ {
		aCurrentNumber := NewNumberMessageGomeetFaker()
		this.Number = append(this.Number, aCurrentNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentPhoneNumber := NewPhoneNumberMessageGomeetFaker()
		this.PhoneNumber = append(this.PhoneNumber, aCurrentPhoneNumber)
	}
	for i := 0; i < 3; i++ {
		aCurrentTeam := NewTeamMessageGomeetFaker()
		this.Team = append(this.Team, aCurrentTeam)
	}
	for i := 0; i < 3; i++ {
		aCurrentTime := NewTimeMessageGomeetFaker()
		this.Time = append(this.Time, aCurrentTime)
	}
	// this.GoogleTimestamp = []*google_protobuf1.Timestamp{} // unknow gomeetfaker function name for type : .google.protobuf.Timestamp
	return this
}

func NewContainsNestedMessageGomeetFaker() *ContainsNestedMessage {
	this := &ContainsNestedMessage{}
	this.NameMsg = NewContainsNestedMessage_NameNestedMessageGomeetFaker()
	this.AddressMsg = NewContainsNestedMessage_AddressNestedMessageGomeetFaker()
	return this
}

func NewContainsNestedMessage_NameNestedMessageGomeetFaker() *ContainsNestedMessage_NameNestedMessage {
	this := &ContainsNestedMessage_NameNestedMessage{}
	this.Name = faker.Name().Name()
	this.FirstName = faker.Name().FirstName()
	this.LastName = faker.Name().LastName()
	this.Prefix = faker.Name().Prefix()
	this.Suffix = faker.Name().Suffix()
	this.Title = faker.Name().Title()
	this.String_ = faker.Name().String()
	return this
}

func NewContainsNestedMessage_AddressNestedMessageGomeetFaker() *ContainsNestedMessage_AddressNestedMessage {
	this := &ContainsNestedMessage_AddressNestedMessage{}
	this.City = faker.Address().City()
	this.StreetName = faker.Address().StreetName()
	this.StreetAddress = faker.Address().StreetAddress()
	this.SecondaryAddress = faker.Address().SecondaryAddress()
	this.BuildingNumber = faker.Address().BuildingNumber()
	this.Postcode = faker.Address().Postcode()
	this.PostcodeByState = faker.Address().PostcodeByState("IN")
	this.ZipCode = faker.Address().ZipCode()
	this.ZipCodeByState = faker.Address().ZipCodeByState("IN")
	this.TimeZone = faker.Address().TimeZone()
	this.CityPrefix = faker.Address().CityPrefix()
	this.CitySuffix = faker.Address().CitySuffix()
	this.StreetSuffix = faker.Address().StreetSuffix()
	this.State = faker.Address().State()
	this.StateAbbr = faker.Address().StateAbbr()
	this.Country = faker.Address().Country()
	this.CountryCode = faker.Address().CountryCode()
	this.Latitude = faker.Address().Latitude()
	this.Longitude = faker.Address().Longitude()
	this.String_ = faker.Address().String()
	return this
}
